{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x853cf5002865C634Ca3Bab2BC7b46A23E7C22F79",
    "txHash": "0xd6067acee2af82a6927b3e42ddea50c4cd6e4f40a2bc3af47a18324bf6aeda24",
    "deployTransaction": {
      "hash": "0xd6067acee2af82a6927b3e42ddea50c4cd6e4f40a2bc3af47a18324bf6aeda24",
      "type": 0,
      "accessList": null,
      "blockHash": null,
      "blockNumber": null,
      "transactionIndex": null,
      "confirmations": 0,
      "from": "0x864e90222f99a70aeECa036Ffc7d12cC4b3313B4",
      "gasPrice": {
        "type": "BigNumber",
        "hex": "0x012a05f200"
      },
      "gasLimit": {
        "type": "BigNumber",
        "hex": "0x075da0"
      },
      "to": null,
      "value": {
        "type": "BigNumber",
        "hex": "0x00"
      },
      "nonce": 44,
      "data": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610759806100616000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead146101645761007b565b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b366004610515565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d1610215565b005b3480156100df57600080fd5b506100d16100ee366004610554565b610292565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f36600461058c565b61031c565b34801561013057600080fd5b506100d161013f366004610554565b6103ad565b34801561015057600080fd5b506100d161015f366004610515565b610405565b34801561017057600080fd5b506100a061017f366004610515565b6104ef565b6000806000836001600160a01b03166040516101aa90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101e5576040519150601f19603f3d011682016040523d82523d6000602084013e6101ea565b606091505b5091509150816101f957600080fd5b8080602001905181019061020d9190610538565b949350505050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f906106c0565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146102bc5760405162461bcd60e51b815260040161023f906106c0565b6040516308f2839760e41b81526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103465760405162461bcd60e51b815260040161023f906106c0565b60405163278f794360e11b81526001600160a01b03841690634f1ef286903490610376908690869060040161065d565b6000604051808303818588803b15801561038f57600080fd5b505af11580156103a3573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146103d75760405162461bcd60e51b815260040161023f906106c0565b604051631b2ce7f360e11b81526001600160a01b038281166004830152831690633659cfe6906024016102e6565b6000546001600160a01b0316331461042f5760405162461bcd60e51b815260040161023f906106c0565b6001600160a01b0381166104945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161023f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000836001600160a01b03166040516101aa906303e1469160e61b815260040190565b600060208284031215610526578081fd5b81356105318161070b565b9392505050565b600060208284031215610549578081fd5b81516105318161070b565b60008060408385031215610566578081fd5b82356105718161070b565b915060208301356105818161070b565b809150509250929050565b6000806000606084860312156105a0578081fd5b83356105ab8161070b565b925060208401356105bb8161070b565b9150604084013567ffffffffffffffff808211156105d7578283fd5b818601915086601f8301126105ea578283fd5b8135818111156105fc576105fc6106f5565b604051601f8201601f19908116603f01168101908382118183101715610624576106246106f5565b8160405282815289602084870101111561063c578586fd5b82602086016020830137856020848301015280955050505050509250925092565b600060018060a01b038416825260206040818401528351806040850152825b818110156106985785810183015185820160600152820161067c565b818111156106a95783606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461072057600080fd5b5056fea2646970667358221220d849f96f3086b9f82cdcf665adb8c697ace05638da1c7c16ab2d26293717af6764736f6c63430008020033",
      "r": "0xe03cddc6c571a12ee3ebd2b8161aa3d81b5b0ed533208fe57f258f086e2a9edf",
      "s": "0x3e263abcc39f525bdd17d5ae502b606835b0f4a50891ddf7cc6ca28b8870db61",
      "v": 147,
      "creates": "0x853cf5002865C634Ca3Bab2BC7b46A23E7C22F79",
      "chainId": 56
    }
  },
  "proxies": [
    {
      "address": "0xEb85Af63fb38eFa97AccaAe2c66F4b3636a435E9",
      "txHash": "0x8a8eade8b1472aa3e5269333aad2a938d2cf31ec01158b057321bcf908f8f433",
      "kind": "transparent"
    },
    {
      "address": "0x6B5C31796d7cff0512261560d9CdBedE6088dBAf",
      "txHash": "0x31f28b6c13dacc56e41befefdfa7c94f7de244c619e415ab0b761c1b7e4f1b65",
      "kind": "transparent"
    },
    {
      "address": "0x327b9359ab1400355cF687c23e23F3cfd127bf94",
      "txHash": "0x3cac832d518ce1a3ebac9cbf69cfe6c17770e52c7664340d5319e02c5817a919",
      "kind": "transparent"
    },
    {
      "address": "0x1815ed0BD3efB14fbA554c02FEfc307Cc720c7A5",
      "txHash": "0x4bbbc0aa093dc05ae6fbf7379023d44603c95416edeb78b2db0579445f645420",
      "kind": "transparent"
    },
    {
      "address": "0xcD2d528E9a7df01D2c7ddc245DB15F809eF14544",
      "txHash": "0x3ee5b77cfb84fc81dd2cdfd33f60a1627571f530d6151c714f5b9b926240214a",
      "kind": "transparent"
    },
    {
      "address": "0x6D05ff9365609be3c8bF2cf905Aa9dDBBa7b7E60",
      "txHash": "0x6d5e982e1992fc4c3299d7e1e74eddf354c66386109d28285aaf52667eaba759",
      "kind": "transparent"
    },
    {
      "address": "0xE65A3a78804f1fd2bA0cC1FD814E429A0642b783",
      "txHash": "0xb8a22a35be0200f683460fa5e55200c6f74abe87075fe24020e2eae30561def2",
      "kind": "transparent"
    },
    {
      "address": "0xa66Df4dEB77Ec5c87dA067B27c90e4D42FD24E91",
      "txHash": "0x1e59bc06e396adcc6e052c8a0d4a90e9d28ded5ce6a971badd001b2397f72e43",
      "kind": "transparent"
    },
    {
      "address": "0xc0B8c7e2cB9bA35F160F13F2be4804062FAd365B",
      "txHash": "0xa9826d99db13c3fb7ce409aa6f0d3dee4ff611d5dd751e8e2ea3a35b5e93473c",
      "kind": "transparent"
    },
    {
      "address": "0x11A250AE3b15Bab026B03b97b0e4d01F3aC03477",
      "txHash": "0xace352d76d43d600ce6650eb7ba569f9e6ca433cfd9481069f04b2510a1669de",
      "kind": "transparent"
    },
    {
      "address": "0x4e2B5591Eb8378314a8042D422F36D3F6E150756",
      "txHash": "0x1de4b920859b57272f78dffe1cc4d9205574ec2c1d64a5e0fb36811478839a04",
      "kind": "transparent"
    },
    {
      "address": "0x9A8279DafccCf8017b4d3EE330aEEaBc31a69d43",
      "txHash": "0x0178a89d46cf180eb887b9aa0a5b665596758f48fe0df96b95c76c027782b784",
      "kind": "transparent"
    },
    {
      "address": "0x89B5c55a49f3AEd34fB10B0a52b26523e7881aDc",
      "txHash": "0x39b8b8c40b8282cb06a15a5b3713e3eda152ace15b0fe69a3312297aef02de58",
      "kind": "transparent"
    },
    {
      "address": "0x0D8FC49D04a35755CeBf31715F380D8c8cb3b76b",
      "txHash": "0xe935fb96a39f2aee6552244bed2ff5ec8976d5a1c0a5ce963abf6c650d26495b",
      "kind": "transparent"
    },
    {
      "address": "0xbE4c5db18BC7e3CcBf83EC1732b79EC170B7A1e0",
      "txHash": "0xe4e5c5a26f03b2d720e49691ec5029224c82ff85b56536cabae98e29d39e7bd4",
      "kind": "transparent"
    },
    {
      "address": "0xCe16028373F210c42f366aDB78819c02611d2b79",
      "txHash": "0xe0e468de8b1c8d850f98c2ecd4f3272e5f78440491012e04bb36ad57a8824f8d",
      "kind": "transparent"
    },
    {
      "address": "0x62A51129E59c85a391baC8f392440E70d70e6c92",
      "txHash": "0x2959ac9437fe45be122f9cd647495ec121f7dc1600a276c83cb7610dab357452",
      "kind": "transparent"
    },
    {
      "address": "0x8D20c3c4CD6fFb8430EEEe3eeC137dA63aA8C299",
      "txHash": "0xa338419dc146f0d8265d81dfa2ff201f0a09957f614821cfc3966ddd8121371b",
      "kind": "transparent"
    },
    {
      "address": "0xC645543d3afF54634Ed30fE3Bc4FA12E4392F83d",
      "txHash": "0x63630a61a1bd9341f0a5c0e5b47b428a26729ace4c833c01706d2eeb77177024",
      "kind": "transparent"
    },
    {
      "address": "0x055E07CAa7A80A8cEf615Fb42beb5F299Ed1f849",
      "txHash": "0xfb29f4f872f82449694321b00342a18bd61561ada68e3f934904cad447a2f4af",
      "kind": "transparent"
    },
    {
      "address": "0x360946e5d90eb6Be5931D88A152E43146415da5E",
      "txHash": "0xcac555f64a96ca214e954c2d0332bb4d46f1e9d1e0f38b92befd137842b1948b",
      "kind": "transparent"
    },
    {
      "address": "0x8b1687BEEf626b99a11303c324c6131BEcdf2245",
      "txHash": "0x6deb5cf3b3cada5528fa1ead698041ed375bf06ebd822103f2f60ba098dbeb4f",
      "kind": "transparent"
    },
    {
      "address": "0xe26067221a286EC1D3A914E192641513883A4b36",
      "txHash": "0x6a74c6aa737aedc66fe4acc8e18de78e602850844a8287053335f7b2c8256253",
      "kind": "transparent"
    },
    {
      "address": "0xab63DcCf1aD5B579F0092D801540346b245D6863",
      "txHash": "0x94b8cd768568887515944edcc9c1cc9f737f5f20da52217338b3a3c035df0682",
      "kind": "transparent"
    },
    {
      "address": "0x9223d19aCd35e385A61d26DC39E0a7f27efE5d4f",
      "txHash": "0x3c2d2dd022b82cd444e2c8e48800b05ac2f912a5c6aaddf888e0f5833a7a755c",
      "kind": "transparent"
    },
    {
      "address": "0x2677DA115ab54158Bacd66A2F168c2457270DDeC",
      "txHash": "0x7f5cb7fc242486700accf444e89e127419169ac4f879c6f9a56683aa20ac04b9",
      "kind": "transparent"
    },
    {
      "address": "0x40961c2e4d85Ad174481270B9c0f7A1907bE5817",
      "txHash": "0x4384a7dc001b7285a7d08d80de53bb164d861358767db3e4c02889b5df7de0b1",
      "kind": "transparent"
    },
    {
      "address": "0x0B3689d8AD6F6fcBB2B07571DF3517335e77B32d",
      "txHash": "0x7c672dbbbbd44cc41f1fc771fc2eda26aed8cbab4e5e173a55d30eceb36dec5a",
      "kind": "transparent"
    },
    {
      "address": "0x32Ec8440416acA93341928d86BA1680c29546A31",
      "txHash": "0x7c6347104b869ccba4f5597a3927d2c694e267fe1d299911d7988ff5c29b7ba0",
      "kind": "transparent"
    }
  ],
  "impls": {
    "85a9bfc7ef819540fce7d3787ed31ec31dbf9cf58d600bce249f23e5b7301eac": {
      "address": "0x46988CEE4407334864d1b83e15802e2f861884bB",
      "txHash": "0x2e5c1fc2012e51a245fa314ddbe79a3a178246274f23bfb298d935fbc5aada0b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "MasterBarista",
            "label": "latte",
            "type": "t_contract(ILATTE)15214",
            "src": "contracts/farm/MasterBarista.sol:41"
          },
          {
            "contract": "MasterBarista",
            "label": "bean",
            "type": "t_contract(IBeanBag)15121",
            "src": "contracts/farm/MasterBarista.sol:43"
          },
          {
            "contract": "MasterBarista",
            "label": "devAddr",
            "type": "t_address",
            "src": "contracts/farm/MasterBarista.sol:45"
          },
          {
            "contract": "MasterBarista",
            "label": "devFeeBps",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:46"
          },
          {
            "contract": "MasterBarista",
            "label": "lattePerBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:48"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusMultiplier",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:50"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusEndBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:52"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusLockUpBps",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:54"
          },
          {
            "contract": "MasterBarista",
            "label": "pools",
            "type": "t_struct(List)15385_storage",
            "src": "contracts/farm/MasterBarista.sol:59"
          },
          {
            "contract": "MasterBarista",
            "label": "poolInfo",
            "type": "t_mapping(t_address,t_struct(PoolInfo)12475_storage)",
            "src": "contracts/farm/MasterBarista.sol:61"
          },
          {
            "contract": "MasterBarista",
            "label": "userInfo",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)12464_storage))",
            "src": "contracts/farm/MasterBarista.sol:63"
          },
          {
            "contract": "MasterBarista",
            "label": "totalAllocPoint",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:65"
          },
          {
            "contract": "MasterBarista",
            "label": "startBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:67"
          },
          {
            "contract": "MasterBarista",
            "label": "stakeTokenCallerAllowancePool",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/farm/MasterBarista.sol:70"
          },
          {
            "contract": "MasterBarista",
            "label": "stakeTokenCallerContracts",
            "type": "t_mapping(t_address,t_struct(List)15385_storage)",
            "src": "contracts/farm/MasterBarista.sol:73"
          }
        ],
        "types": {
          "t_contract(ILATTE)15214": {
            "label": "contract ILATTE"
          },
          "t_contract(IBeanBag)15121": {
            "label": "contract IBeanBag"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(List)15385_storage": {
            "label": "struct LinkList.List",
            "members": [
              {
                "label": "llSize",
                "type": "t_uint256"
              },
              {
                "label": "next",
                "type": "t_mapping(t_address,t_address)"
              }
            ]
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_struct(PoolInfo)12475_storage)": {
            "label": "mapping(address => struct MasterBarista.PoolInfo)"
          },
          "t_struct(PoolInfo)12475_storage": {
            "label": "struct MasterBarista.PoolInfo",
            "members": [
              {
                "label": "allocPoint",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256"
              },
              {
                "label": "accLattePerShare",
                "type": "t_uint256"
              },
              {
                "label": "accLattePerShareTilBonusEnd",
                "type": "t_uint256"
              },
              {
                "label": "allocBps",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)12464_storage))": {
            "label": "mapping(address => mapping(address => struct MasterBarista.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)12464_storage)": {
            "label": "mapping(address => struct MasterBarista.UserInfo)"
          },
          "t_struct(UserInfo)12464_storage": {
            "label": "struct MasterBarista.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              },
              {
                "label": "bonusDebt",
                "type": "t_uint256"
              },
              {
                "label": "fundedBy",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(List)15385_storage)": {
            "label": "mapping(address => struct LinkList.List)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "bcbfbdb8129973c7cfaaacfb9f771eb7057b0a46546df5e28a183eb53e911447": {
      "address": "0x5E8F56e5812f10B819c1649c1f6680eA82f29DF2",
      "txHash": "0xd9231586b02508bc114f4ca72af9ac1ddd0180aef374e54faca324e938842784",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "BoosterConfig",
            "label": "energyInfo",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(BoosterEnergyInfo)19975_storage))",
            "src": "contracts/nft/BoosterConfig.sol:46"
          },
          {
            "contract": "BoosterConfig",
            "label": "boosterNftAllowance",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_bool)))",
            "src": "contracts/nft/BoosterConfig.sol:48"
          },
          {
            "contract": "BoosterConfig",
            "label": "stakeTokenAllowance",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/nft/BoosterConfig.sol:50"
          },
          {
            "contract": "BoosterConfig",
            "label": "callerAllowance",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/nft/BoosterConfig.sol:52"
          }
        ],
        "types": {
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(BoosterEnergyInfo)19975_storage))": {
            "label": "mapping(address => mapping(uint256 => struct BoosterConfig.BoosterEnergyInfo))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_struct(BoosterEnergyInfo)19975_storage)": {
            "label": "mapping(uint256 => struct BoosterConfig.BoosterEnergyInfo)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(BoosterEnergyInfo)19975_storage": {
            "label": "struct BoosterConfig.BoosterEnergyInfo",
            "members": [
              {
                "label": "maxEnergy",
                "type": "t_uint256"
              },
              {
                "label": "currentEnergy",
                "type": "t_uint256"
              },
              {
                "label": "boostBps",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_bool)))": {
            "label": "mapping(address => mapping(address => mapping(uint256 => bool)))"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0935ff731f3aaca542d2ac28b0235e14e91fecd61f7bb22dc5187cc5cfe073b6": {
      "address": "0x26B508Afc5bdC2eEB011F68c2459ac68319e0756",
      "txHash": "0x98dfa98a8d21756957817ce3a3e59248d0cd739a53c8a2a4e3d611372f7f551d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)39_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Booster",
            "label": "masterBarista",
            "type": "t_contract(IMasterBarista)14965",
            "src": "contracts/nft/Booster.sol:36"
          },
          {
            "contract": "Booster",
            "label": "boosterConfig",
            "type": "t_contract(IBoosterConfig)21275",
            "src": "contracts/nft/Booster.sol:37"
          },
          {
            "contract": "Booster",
            "label": "latte",
            "type": "t_contract(IERC20)5366",
            "src": "contracts/nft/Booster.sol:38"
          },
          {
            "contract": "Booster",
            "label": "userInfo",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)18787_storage))",
            "src": "contracts/nft/Booster.sol:50"
          },
          {
            "contract": "Booster",
            "label": "totalAccumBoostedReward",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/nft/Booster.sol:52"
          },
          {
            "contract": "Booster",
            "label": "userStakingNFT",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(NFTStakingInfo)18792_storage))",
            "src": "contracts/nft/Booster.sol:53"
          },
          {
            "contract": "Booster",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/nft/Booster.sol:55"
          }
        ],
        "types": {
          "t_contract(IMasterBarista)14965": {
            "label": "contract IMasterBarista"
          },
          "t_contract(IBoosterConfig)21275": {
            "label": "contract IBoosterConfig"
          },
          "t_contract(IERC20)5366": {
            "label": "contract IERC20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)18787_storage))": {
            "label": "mapping(address => mapping(address => struct Booster.UserInfo))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(UserInfo)18787_storage)": {
            "label": "mapping(address => struct Booster.UserInfo)"
          },
          "t_struct(UserInfo)18787_storage": {
            "label": "struct Booster.UserInfo",
            "members": [
              {
                "label": "accumBoostedReward",
                "type": "t_uint256"
              },
              {
                "label": "lastUserActionTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(NFTStakingInfo)18792_storage))": {
            "label": "mapping(address => mapping(address => struct Booster.NFTStakingInfo))"
          },
          "t_mapping(t_address,t_struct(NFTStakingInfo)18792_storage)": {
            "label": "mapping(address => struct Booster.NFTStakingInfo)"
          },
          "t_struct(NFTStakingInfo)18792_storage": {
            "label": "struct Booster.NFTStakingInfo",
            "members": [
              {
                "label": "nftAddress",
                "type": "t_address"
              },
              {
                "label": "nftTokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)39_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)39_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)3305_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)3305_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3040_storage"
              }
            ]
          },
          "t_struct(Set)3040_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "69ca94a4fdff25d2579756521e72c4154c90a2c449952d8f773f9c1a16b71a41": {
      "address": "0xb9DC48f8f0671f163751bd72602718eC08032dA5",
      "txHash": "0x283f439dbf00618d85c570379bb98f34a091e57990b7f6533fb11434217111d5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)39_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Booster",
            "label": "masterBarista",
            "type": "t_contract(IMasterBarista)14965",
            "src": "contracts/nft/Booster.sol:36"
          },
          {
            "contract": "Booster",
            "label": "boosterConfig",
            "type": "t_contract(IBoosterConfig)21387",
            "src": "contracts/nft/Booster.sol:37"
          },
          {
            "contract": "Booster",
            "label": "latte",
            "type": "t_contract(IERC20)5366",
            "src": "contracts/nft/Booster.sol:38"
          },
          {
            "contract": "Booster",
            "label": "userInfo",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)18787_storage))",
            "src": "contracts/nft/Booster.sol:50"
          },
          {
            "contract": "Booster",
            "label": "totalAccumBoostedReward",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/nft/Booster.sol:52"
          },
          {
            "contract": "Booster",
            "label": "userStakingNFT",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(NFTStakingInfo)18792_storage))",
            "src": "contracts/nft/Booster.sol:53"
          },
          {
            "contract": "Booster",
            "label": "nftStaker",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "src": "contracts/nft/Booster.sol:54"
          },
          {
            "contract": "Booster",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/nft/Booster.sol:56"
          }
        ],
        "types": {
          "t_contract(IMasterBarista)14965": {
            "label": "contract IMasterBarista"
          },
          "t_contract(IBoosterConfig)21387": {
            "label": "contract IBoosterConfig"
          },
          "t_contract(IERC20)5366": {
            "label": "contract IERC20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)18787_storage))": {
            "label": "mapping(address => mapping(address => struct Booster.UserInfo))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(UserInfo)18787_storage)": {
            "label": "mapping(address => struct Booster.UserInfo)"
          },
          "t_struct(UserInfo)18787_storage": {
            "label": "struct Booster.UserInfo",
            "members": [
              {
                "label": "accumBoostedReward",
                "type": "t_uint256"
              },
              {
                "label": "lastUserActionTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(NFTStakingInfo)18792_storage))": {
            "label": "mapping(address => mapping(address => struct Booster.NFTStakingInfo))"
          },
          "t_mapping(t_address,t_struct(NFTStakingInfo)18792_storage)": {
            "label": "mapping(address => struct Booster.NFTStakingInfo)"
          },
          "t_struct(NFTStakingInfo)18792_storage": {
            "label": "struct Booster.NFTStakingInfo",
            "members": [
              {
                "label": "nftAddress",
                "type": "t_address"
              },
              {
                "label": "nftTokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)39_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)39_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)3305_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)3305_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3040_storage"
              }
            ]
          },
          "t_struct(Set)3040_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "06270840b455c467dd9ac955c96f151bcaf4e02ca75c3cfe61d8cd77ee59891d": {
      "address": "0xE3f1E2735f2120e1E56b05b6C92f96FB60aA40F1",
      "txHash": "0xf1e751165914b6dd30baba4b85489214d59e1b0c51739883043befebe278cecc",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)3840_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3217_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:485"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721PausableUpgradeable.sol:38"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)39_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "LatteNFT",
            "label": "_tokenIds",
            "type": "t_struct(Counter)2843_storage",
            "src": "contracts/nft/LatteNFT.sol:29"
          },
          {
            "contract": "LatteNFT",
            "label": "_categoryIds",
            "type": "t_struct(Counter)2843_storage",
            "src": "contracts/nft/LatteNFT.sol:32"
          },
          {
            "contract": "LatteNFT",
            "label": "latteNames",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/nft/LatteNFT.sol:35"
          },
          {
            "contract": "LatteNFT",
            "label": "categoryInfo",
            "type": "t_mapping(t_uint256,t_struct(Category)21671_storage)",
            "src": "contracts/nft/LatteNFT.sol:37"
          },
          {
            "contract": "LatteNFT",
            "label": "latteNFTToCategory",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/nft/LatteNFT.sol:39"
          },
          {
            "contract": "LatteNFT",
            "label": "_categoryToLatteNFTList",
            "type": "t_mapping(t_uint256,t_struct(UintSet)3840_storage)",
            "src": "contracts/nft/LatteNFT.sol:41"
          },
          {
            "contract": "LatteNFT",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/nft/LatteNFT.sol:43"
          }
        ],
        "types": {
          "t_struct(Counter)2843_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_struct(Category)21671_storage)": {
            "label": "mapping(uint256 => struct LatteNFT.Category)"
          },
          "t_struct(Category)21671_storage": {
            "label": "struct LatteNFT.Category",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "categoryURI",
                "type": "t_string_storage"
              },
              {
                "label": "timestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(UintSet)3840_storage)": {
            "label": "mapping(uint256 => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)3840_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3454_storage"
              }
            ]
          },
          "t_struct(Set)3454_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)39_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)39_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)3719_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)3719_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3454_storage"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(UintSet)3840_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintToAddressMap)3217_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)2899_storage"
              }
            ]
          },
          "t_struct(Map)2899_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)2891_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)2891_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)2891_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "8b4627953d307d3d8465e6c315dbe794c14f381b4c0ccaaa68d809b14ba69603": {
      "address": "0xFcCa3d535aB089A0211bEb01158a69cF95cC061e",
      "txHash": "0xcfa62683aceabfe3d988d4800201a0f1277e73771caf7ba38cc926d6735337f5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "BoosterConfig",
            "label": "energyInfo",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(BoosterEnergyInfo)21178_storage))",
            "src": "contracts/nft/BoosterConfig.sol:47"
          },
          {
            "contract": "BoosterConfig",
            "label": "boosterNftAllowance",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_bool)))",
            "src": "contracts/nft/BoosterConfig.sol:49"
          },
          {
            "contract": "BoosterConfig",
            "label": "stakeTokenAllowance",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/nft/BoosterConfig.sol:51"
          },
          {
            "contract": "BoosterConfig",
            "label": "callerAllowance",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/nft/BoosterConfig.sol:53"
          }
        ],
        "types": {
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(BoosterEnergyInfo)21178_storage))": {
            "label": "mapping(address => mapping(uint256 => struct BoosterConfig.BoosterEnergyInfo))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_struct(BoosterEnergyInfo)21178_storage)": {
            "label": "mapping(uint256 => struct BoosterConfig.BoosterEnergyInfo)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(BoosterEnergyInfo)21178_storage": {
            "label": "struct BoosterConfig.BoosterEnergyInfo",
            "members": [
              {
                "label": "maxEnergy",
                "type": "t_uint256"
              },
              {
                "label": "currentEnergy",
                "type": "t_uint256"
              },
              {
                "label": "boostBps",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_bool)))": {
            "label": "mapping(address => mapping(address => mapping(uint256 => bool)))"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "11caef2fa29216e17ecd97b508310d78c9e1831fb3158c794568c015b301085c": {
      "address": "0x15A3BF1e0D9faeD9e70c2a34646A3dcd19B599E9",
      "txHash": "0x09c648a57d0aa4febaabe6836cf45b480a97b2f1c11c0bb4a1012bf653b98e5d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)39_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Booster",
            "label": "masterBarista",
            "type": "t_contract(IMasterBarista)15346",
            "src": "contracts/nft/Booster.sol:39"
          },
          {
            "contract": "Booster",
            "label": "boosterConfig",
            "type": "t_contract(IBoosterConfig)22592",
            "src": "contracts/nft/Booster.sol:40"
          },
          {
            "contract": "Booster",
            "label": "latte",
            "type": "t_contract(IERC20Upgradeable)1097",
            "src": "contracts/nft/Booster.sol:41"
          },
          {
            "contract": "Booster",
            "label": "userInfo",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)20045_storage))",
            "src": "contracts/nft/Booster.sol:53"
          },
          {
            "contract": "Booster",
            "label": "totalAccumBoostedReward",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/nft/Booster.sol:55"
          },
          {
            "contract": "Booster",
            "label": "userStakingNFT",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(NFTStakingInfo)20050_storage))",
            "src": "contracts/nft/Booster.sol:56"
          },
          {
            "contract": "Booster",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/nft/Booster.sol:58"
          }
        ],
        "types": {
          "t_contract(IMasterBarista)15346": {
            "label": "contract IMasterBarista"
          },
          "t_contract(IBoosterConfig)22592": {
            "label": "contract IBoosterConfig"
          },
          "t_contract(IERC20Upgradeable)1097": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)20045_storage))": {
            "label": "mapping(address => mapping(address => struct Booster.UserInfo))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(UserInfo)20045_storage)": {
            "label": "mapping(address => struct Booster.UserInfo)"
          },
          "t_struct(UserInfo)20045_storage": {
            "label": "struct Booster.UserInfo",
            "members": [
              {
                "label": "accumBoostedReward",
                "type": "t_uint256"
              },
              {
                "label": "lastUserActionTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(NFTStakingInfo)20050_storage))": {
            "label": "mapping(address => mapping(address => struct Booster.NFTStakingInfo))"
          },
          "t_mapping(t_address,t_struct(NFTStakingInfo)20050_storage)": {
            "label": "mapping(address => struct Booster.NFTStakingInfo)"
          },
          "t_struct(NFTStakingInfo)20050_storage": {
            "label": "struct Booster.NFTStakingInfo",
            "members": [
              {
                "label": "nftAddress",
                "type": "t_address"
              },
              {
                "label": "nftTokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)39_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)39_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)3719_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)3719_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3454_storage"
              }
            ]
          },
          "t_struct(Set)3454_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b989d0a4f8c593b4c8afc43d34d77022e0f8ff0b2f48c7d8df22505a7868801d": {
      "address": "0xEFd6c75bC6bEC22CD54cA673faf2B9e7ac97247A",
      "txHash": "0xc0ea3752af8fec39500454ce77d25b9e916bfa0a99d776f6aceaa1f9869d90b1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)39_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Booster",
            "label": "masterBarista",
            "type": "t_contract(IMasterBarista)15341",
            "src": "contracts/nft/Booster.sol:39"
          },
          {
            "contract": "Booster",
            "label": "boosterConfig",
            "type": "t_contract(IBoosterConfig)22611",
            "src": "contracts/nft/Booster.sol:40"
          },
          {
            "contract": "Booster",
            "label": "latte",
            "type": "t_contract(IERC20Upgradeable)1097",
            "src": "contracts/nft/Booster.sol:41"
          },
          {
            "contract": "Booster",
            "label": "userInfo",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)20039_storage))",
            "src": "contracts/nft/Booster.sol:53"
          },
          {
            "contract": "Booster",
            "label": "totalAccumBoostedReward",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/nft/Booster.sol:55"
          },
          {
            "contract": "Booster",
            "label": "userStakingNFT",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(NFTStakingInfo)20044_storage))",
            "src": "contracts/nft/Booster.sol:56"
          },
          {
            "contract": "Booster",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/nft/Booster.sol:58"
          }
        ],
        "types": {
          "t_contract(IMasterBarista)15341": {
            "label": "contract IMasterBarista"
          },
          "t_contract(IBoosterConfig)22611": {
            "label": "contract IBoosterConfig"
          },
          "t_contract(IERC20Upgradeable)1097": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)20039_storage))": {
            "label": "mapping(address => mapping(address => struct Booster.UserInfo))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(UserInfo)20039_storage)": {
            "label": "mapping(address => struct Booster.UserInfo)"
          },
          "t_struct(UserInfo)20039_storage": {
            "label": "struct Booster.UserInfo",
            "members": [
              {
                "label": "accumBoostedReward",
                "type": "t_uint256"
              },
              {
                "label": "lastUserActionTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(NFTStakingInfo)20044_storage))": {
            "label": "mapping(address => mapping(address => struct Booster.NFTStakingInfo))"
          },
          "t_mapping(t_address,t_struct(NFTStakingInfo)20044_storage)": {
            "label": "mapping(address => struct Booster.NFTStakingInfo)"
          },
          "t_struct(NFTStakingInfo)20044_storage": {
            "label": "struct Booster.NFTStakingInfo",
            "members": [
              {
                "label": "nftAddress",
                "type": "t_address"
              },
              {
                "label": "nftTokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)39_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)39_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)3719_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)3719_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)3454_storage"
              }
            ]
          },
          "t_struct(Set)3454_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6276b898054552e0907ab5f3961b706c09503205bcf9b526eed50f45bbd9d324": {
      "address": "0xfa6E624c050FeC33BaDFdDa568D4d9B26Ffa3375",
      "txHash": "0x13cf7df3c4927b509bd23b8e2dc8f9408bf5c38db2062d260d8cae45f696ffcc",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "MasterBarista",
            "label": "latte",
            "type": "t_contract(ILATTE)15815",
            "src": "contracts/farm/MasterBarista.sol:41"
          },
          {
            "contract": "MasterBarista",
            "label": "bean",
            "type": "t_contract(IBeanBag)15722",
            "src": "contracts/farm/MasterBarista.sol:43"
          },
          {
            "contract": "MasterBarista",
            "label": "devAddr",
            "type": "t_address",
            "src": "contracts/farm/MasterBarista.sol:45"
          },
          {
            "contract": "MasterBarista",
            "label": "devFeeBps",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:46"
          },
          {
            "contract": "MasterBarista",
            "label": "lattePerBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:48"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusMultiplier",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:50"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusEndBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:52"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusLockUpBps",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:54"
          },
          {
            "contract": "MasterBarista",
            "label": "pools",
            "type": "t_struct(List)15986_storage",
            "src": "contracts/farm/MasterBarista.sol:59"
          },
          {
            "contract": "MasterBarista",
            "label": "poolInfo",
            "type": "t_mapping(t_address,t_struct(PoolInfo)13071_storage)",
            "src": "contracts/farm/MasterBarista.sol:61"
          },
          {
            "contract": "MasterBarista",
            "label": "userInfo",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)13060_storage))",
            "src": "contracts/farm/MasterBarista.sol:63"
          },
          {
            "contract": "MasterBarista",
            "label": "totalAllocPoint",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:65"
          },
          {
            "contract": "MasterBarista",
            "label": "startBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:67"
          },
          {
            "contract": "MasterBarista",
            "label": "stakeTokenCallerAllowancePool",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/farm/MasterBarista.sol:70"
          },
          {
            "contract": "MasterBarista",
            "label": "stakeTokenCallerContracts",
            "type": "t_mapping(t_address,t_struct(List)15986_storage)",
            "src": "contracts/farm/MasterBarista.sol:73"
          }
        ],
        "types": {
          "t_contract(ILATTE)15815": {
            "label": "contract ILATTE"
          },
          "t_contract(IBeanBag)15722": {
            "label": "contract IBeanBag"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(List)15986_storage": {
            "label": "struct LinkList.List",
            "members": [
              {
                "label": "llSize",
                "type": "t_uint256"
              },
              {
                "label": "next",
                "type": "t_mapping(t_address,t_address)"
              }
            ]
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_struct(PoolInfo)13071_storage)": {
            "label": "mapping(address => struct MasterBarista.PoolInfo)"
          },
          "t_struct(PoolInfo)13071_storage": {
            "label": "struct MasterBarista.PoolInfo",
            "members": [
              {
                "label": "allocPoint",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256"
              },
              {
                "label": "accLattePerShare",
                "type": "t_uint256"
              },
              {
                "label": "accLattePerShareTilBonusEnd",
                "type": "t_uint256"
              },
              {
                "label": "allocBps",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)13060_storage))": {
            "label": "mapping(address => mapping(address => struct MasterBarista.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)13060_storage)": {
            "label": "mapping(address => struct MasterBarista.UserInfo)"
          },
          "t_struct(UserInfo)13060_storage": {
            "label": "struct MasterBarista.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              },
              {
                "label": "bonusDebt",
                "type": "t_uint256"
              },
              {
                "label": "fundedBy",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(List)15986_storage)": {
            "label": "mapping(address => struct LinkList.List)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "9bbc5b1a6e40a6c770f52fb12929075f397d427a3473bf9a8a1651198c0a3137": {
      "address": "0x6697deBB740110f838ea7C49907C8265fFB3c5F5",
      "txHash": "0x1b1a9ac3d87a09d8cee33c685ca74a24bc39190f5418b9541b7e5f62e3612006",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721HolderUpgradeable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)39_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "LatteMarket",
            "label": "isNFTSupported",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/nft/LatteMarket.sol:50"
          },
          {
            "contract": "LatteMarket",
            "label": "feeAddr",
            "type": "t_address",
            "src": "contracts/nft/LatteMarket.sol:51"
          },
          {
            "contract": "LatteMarket",
            "label": "feePercentBps",
            "type": "t_uint256",
            "src": "contracts/nft/LatteMarket.sol:52"
          },
          {
            "contract": "LatteMarket",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)26592",
            "src": "contracts/nft/LatteMarket.sol:53"
          },
          {
            "contract": "LatteMarket",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/nft/LatteMarket.sol:54"
          },
          {
            "contract": "LatteMarket",
            "label": "tokenCategorySellers",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "src": "contracts/nft/LatteMarket.sol:55"
          },
          {
            "contract": "LatteMarket",
            "label": "tokenBid",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(BidEntry)22867_storage))",
            "src": "contracts/nft/LatteMarket.sol:56"
          },
          {
            "contract": "LatteMarket",
            "label": "latteNFTMetadata",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(LatteNFTMetadata)22891_storage))",
            "src": "contracts/nft/LatteMarket.sol:59"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IWNativeRelayer)26592": {
            "label": "contract IWNativeRelayer"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(BidEntry)22867_storage))": {
            "label": "mapping(address => mapping(uint256 => struct LatteMarket.BidEntry))"
          },
          "t_mapping(t_uint256,t_struct(BidEntry)22867_storage)": {
            "label": "mapping(uint256 => struct LatteMarket.BidEntry)"
          },
          "t_struct(BidEntry)22867_storage": {
            "label": "struct LatteMarket.BidEntry",
            "members": [
              {
                "label": "bidder",
                "type": "t_address"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(LatteNFTMetadata)22891_storage))": {
            "label": "mapping(address => mapping(uint256 => struct LatteMarket.LatteNFTMetadata))"
          },
          "t_mapping(t_uint256,t_struct(LatteNFTMetadata)22891_storage)": {
            "label": "mapping(uint256 => struct LatteMarket.LatteNFTMetadata)"
          },
          "t_struct(LatteNFTMetadata)22891_storage": {
            "label": "struct LatteMarket.LatteNFTMetadata",
            "members": [
              {
                "label": "cap",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "isBidding",
                "type": "t_bool"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "quoteBep20",
                "type": "t_contract(IERC20Upgradeable)1743"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)1743": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)39_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)39_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4414_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4414_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4149_storage"
              }
            ]
          },
          "t_struct(Set)4149_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e0f7a7f8d3e424d5424446a7716743e056a11c095cd3cdcff0e0ed650383540d": {
      "address": "0x101DF414a72f9e27E7bC5A16bC611880a51b2760",
      "txHash": "0x6d490ab942f08d7567d329214f2b1be7c571e1d19aa47fb0cf70c446abca074b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4535_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3912_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:485"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721PausableUpgradeable.sol:38"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)39_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "LatteNFT",
            "label": "_tokenIds",
            "type": "t_struct(Counter)3538_storage",
            "src": "contracts/nft/LatteNFT.sol:29"
          },
          {
            "contract": "LatteNFT",
            "label": "_categoryIds",
            "type": "t_struct(Counter)3538_storage",
            "src": "contracts/nft/LatteNFT.sol:32"
          },
          {
            "contract": "LatteNFT",
            "label": "latteNames",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/nft/LatteNFT.sol:35"
          },
          {
            "contract": "LatteNFT",
            "label": "categoryInfo",
            "type": "t_mapping(t_uint256,t_struct(Category)24615_storage)",
            "src": "contracts/nft/LatteNFT.sol:37"
          },
          {
            "contract": "LatteNFT",
            "label": "latteNFTToCategory",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/nft/LatteNFT.sol:39"
          },
          {
            "contract": "LatteNFT",
            "label": "_categoryToLatteNFTList",
            "type": "t_mapping(t_uint256,t_struct(UintSet)4535_storage)",
            "src": "contracts/nft/LatteNFT.sol:41"
          },
          {
            "contract": "LatteNFT",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/nft/LatteNFT.sol:43"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "OGNFT",
            "label": "ogOwnerToken",
            "type": "t_mapping(t_uint256,t_contract(IOGOwnerToken)26452)",
            "src": "contracts/nft/OGNFT.sol:25"
          },
          {
            "contract": "OGNFT",
            "label": "masterBarista",
            "type": "t_contract(IMasterBarista)15959",
            "src": "contracts/nft/OGNFT.sol:27"
          },
          {
            "contract": "OGNFT",
            "label": "latte",
            "type": "t_contract(IERC20Upgradeable)1743",
            "src": "contracts/nft/OGNFT.sol:28"
          },
          {
            "contract": "OGNFT",
            "label": "_userStakeTokenIds",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UintSet)4535_storage))",
            "src": "contracts/nft/OGNFT.sol:29"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_contract(IOGOwnerToken)26452)": {
            "label": "mapping(uint256 => contract IOGOwnerToken)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IOGOwnerToken)26452": {
            "label": "contract IOGOwnerToken"
          },
          "t_contract(IMasterBarista)15959": {
            "label": "contract IMasterBarista"
          },
          "t_contract(IERC20Upgradeable)1743": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(UintSet)4535_storage))": {
            "label": "mapping(uint256 => mapping(address => struct EnumerableSetUpgradeable.UintSet))"
          },
          "t_mapping(t_address,t_struct(UintSet)4535_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)4535_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4149_storage"
              }
            ]
          },
          "t_struct(Set)4149_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)3538_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_struct(Category)24615_storage)": {
            "label": "mapping(uint256 => struct LatteNFT.Category)"
          },
          "t_struct(Category)24615_storage": {
            "label": "struct LatteNFT.Category",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "categoryURI",
                "type": "t_string_storage"
              },
              {
                "label": "timestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(UintSet)4535_storage)": {
            "label": "mapping(uint256 => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)39_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)39_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4414_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4414_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4149_storage"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_struct(UintToAddressMap)3912_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3594_storage"
              }
            ]
          },
          "t_struct(Map)3594_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3586_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3586_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)3586_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "086527e9e60536f2b9a42b510bac2801474df740f7a05dc67da214122e2d8b8e": {
      "address": "0x24701D644E0ae374768cb6f11a99DC9f06fB6aAA",
      "txHash": "0x2b2c31ebbb6e0f40b38cc7b31a16a77f7fdbf5042473f93b3fe5220e510b2de5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "BoosterConfig",
            "label": "_boosterEnergyInfo",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(BoosterEnergyInfo)22038_storage))",
            "src": "contracts/nft/BoosterConfig.sol:62"
          },
          {
            "contract": "BoosterConfig",
            "label": "_categoryEnergyInfo",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(CategoryEnergyInfo)22045_storage))",
            "src": "contracts/nft/BoosterConfig.sol:63"
          },
          {
            "contract": "BoosterConfig",
            "label": "boosterNftAllowance",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_bool)))",
            "src": "contracts/nft/BoosterConfig.sol:65"
          },
          {
            "contract": "BoosterConfig",
            "label": "stakeTokenAllowance",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/nft/BoosterConfig.sol:67"
          },
          {
            "contract": "BoosterConfig",
            "label": "callerAllowance",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/nft/BoosterConfig.sol:69"
          }
        ],
        "types": {
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(BoosterEnergyInfo)22038_storage))": {
            "label": "mapping(address => mapping(uint256 => struct BoosterConfig.BoosterEnergyInfo))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_struct(BoosterEnergyInfo)22038_storage)": {
            "label": "mapping(uint256 => struct BoosterConfig.BoosterEnergyInfo)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(BoosterEnergyInfo)22038_storage": {
            "label": "struct BoosterConfig.BoosterEnergyInfo",
            "members": [
              {
                "label": "maxEnergy",
                "type": "t_uint256"
              },
              {
                "label": "currentEnergy",
                "type": "t_uint256"
              },
              {
                "label": "boostBps",
                "type": "t_uint256"
              },
              {
                "label": "updatedAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(CategoryEnergyInfo)22045_storage))": {
            "label": "mapping(address => mapping(uint256 => struct BoosterConfig.CategoryEnergyInfo))"
          },
          "t_mapping(t_uint256,t_struct(CategoryEnergyInfo)22045_storage)": {
            "label": "mapping(uint256 => struct BoosterConfig.CategoryEnergyInfo)"
          },
          "t_struct(CategoryEnergyInfo)22045_storage": {
            "label": "struct BoosterConfig.CategoryEnergyInfo",
            "members": [
              {
                "label": "maxEnergy",
                "type": "t_uint256"
              },
              {
                "label": "boostBps",
                "type": "t_uint256"
              },
              {
                "label": "updatedAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_bool)))": {
            "label": "mapping(address => mapping(address => mapping(uint256 => bool)))"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "dafe8673f2e00e1f26b7d1d3fdb7e19e6ad8bb0ade2ec78d855680eaa720b33b": {
      "address": "0x95c7475719a3507C67471F4709F24EC46bdf8952",
      "txHash": "0x2c59c53b3cf806ca918cbebef02d71129ead1e0c59a0a5c5ee37d4a1e94f1093",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)39_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Booster",
            "label": "masterBarista",
            "type": "t_contract(IMasterBarista)15947",
            "src": "contracts/nft/Booster.sol:42"
          },
          {
            "contract": "Booster",
            "label": "boosterConfig",
            "type": "t_contract(IBoosterConfig)26322",
            "src": "contracts/nft/Booster.sol:43"
          },
          {
            "contract": "Booster",
            "label": "latte",
            "type": "t_contract(IERC20Upgradeable)1743",
            "src": "contracts/nft/Booster.sol:44"
          },
          {
            "contract": "Booster",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)26581",
            "src": "contracts/nft/Booster.sol:45"
          },
          {
            "contract": "Booster",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/nft/Booster.sol:46"
          },
          {
            "contract": "Booster",
            "label": "userInfo",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)20768_storage))",
            "src": "contracts/nft/Booster.sol:58"
          },
          {
            "contract": "Booster",
            "label": "totalAccumBoostedReward",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/nft/Booster.sol:60"
          },
          {
            "contract": "Booster",
            "label": "userStakingNFT",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(NFTStakingInfo)20773_storage))",
            "src": "contracts/nft/Booster.sol:61"
          },
          {
            "contract": "Booster",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/nft/Booster.sol:63"
          }
        ],
        "types": {
          "t_contract(IMasterBarista)15947": {
            "label": "contract IMasterBarista"
          },
          "t_contract(IBoosterConfig)26322": {
            "label": "contract IBoosterConfig"
          },
          "t_contract(IERC20Upgradeable)1743": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IWNativeRelayer)26581": {
            "label": "contract IWNativeRelayer"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)20768_storage))": {
            "label": "mapping(address => mapping(address => struct Booster.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)20768_storage)": {
            "label": "mapping(address => struct Booster.UserInfo)"
          },
          "t_struct(UserInfo)20768_storage": {
            "label": "struct Booster.UserInfo",
            "members": [
              {
                "label": "accumBoostedReward",
                "type": "t_uint256"
              },
              {
                "label": "lastUserActionTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(NFTStakingInfo)20773_storage))": {
            "label": "mapping(address => mapping(address => struct Booster.NFTStakingInfo))"
          },
          "t_mapping(t_address,t_struct(NFTStakingInfo)20773_storage)": {
            "label": "mapping(address => struct Booster.NFTStakingInfo)"
          },
          "t_struct(NFTStakingInfo)20773_storage": {
            "label": "struct Booster.NFTStakingInfo",
            "members": [
              {
                "label": "nftAddress",
                "type": "t_address"
              },
              {
                "label": "nftTokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)39_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)39_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4414_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4414_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4149_storage"
              }
            ]
          },
          "t_struct(Set)4149_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b1a037fe44c081ca443cb8a04fed84b5a06c93d10b0d701f063c35ee89d9784a": {
      "address": "0x0cf8a1b346c2fa21a43D3209cD4cb179201b1d65",
      "txHash": "0x59121b2056f8b319715522379fc756a215efb0c4acc544b66ddd9f5c77681c3c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "BoosterConfig",
            "label": "_boosterEnergyInfo",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(BoosterEnergyInfo)22060_storage))",
            "src": "contracts/nft/BoosterConfig.sol:73"
          },
          {
            "contract": "BoosterConfig",
            "label": "_categoryEnergyInfo",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(CategoryEnergyInfo)22067_storage))",
            "src": "contracts/nft/BoosterConfig.sol:74"
          },
          {
            "contract": "BoosterConfig",
            "label": "_boosterNftAllowance",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_bool)))",
            "src": "contracts/nft/BoosterConfig.sol:76"
          },
          {
            "contract": "BoosterConfig",
            "label": "_categoryNftAllowance",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_bool)))",
            "src": "contracts/nft/BoosterConfig.sol:77"
          },
          {
            "contract": "BoosterConfig",
            "label": "stakeTokenAllowance",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/nft/BoosterConfig.sol:79"
          },
          {
            "contract": "BoosterConfig",
            "label": "callerAllowance",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/nft/BoosterConfig.sol:81"
          }
        ],
        "types": {
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(BoosterEnergyInfo)22060_storage))": {
            "label": "mapping(address => mapping(uint256 => struct BoosterConfig.BoosterEnergyInfo))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_struct(BoosterEnergyInfo)22060_storage)": {
            "label": "mapping(uint256 => struct BoosterConfig.BoosterEnergyInfo)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(BoosterEnergyInfo)22060_storage": {
            "label": "struct BoosterConfig.BoosterEnergyInfo",
            "members": [
              {
                "label": "maxEnergy",
                "type": "t_uint256"
              },
              {
                "label": "currentEnergy",
                "type": "t_uint256"
              },
              {
                "label": "boostBps",
                "type": "t_uint256"
              },
              {
                "label": "updatedAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(CategoryEnergyInfo)22067_storage))": {
            "label": "mapping(address => mapping(uint256 => struct BoosterConfig.CategoryEnergyInfo))"
          },
          "t_mapping(t_uint256,t_struct(CategoryEnergyInfo)22067_storage)": {
            "label": "mapping(uint256 => struct BoosterConfig.CategoryEnergyInfo)"
          },
          "t_struct(CategoryEnergyInfo)22067_storage": {
            "label": "struct BoosterConfig.CategoryEnergyInfo",
            "members": [
              {
                "label": "maxEnergy",
                "type": "t_uint256"
              },
              {
                "label": "boostBps",
                "type": "t_uint256"
              },
              {
                "label": "updatedAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_bool)))": {
            "label": "mapping(address => mapping(address => mapping(uint256 => bool)))"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "015892075e6f3af8a567be78c3f24a42c475d953ce0bacc0dea8977234310086": {
      "address": "0xa49e91dC679a222A53A811b0ab4c4c9a66AA3Dc7",
      "txHash": "0xdafa38e9395ea0a291ecd655f94bc6af5a695267119b39617550e4d2c51c1aeb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)39_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Booster",
            "label": "masterBarista",
            "type": "t_contract(IMasterBarista)15959",
            "src": "contracts/nft/Booster.sol:42"
          },
          {
            "contract": "Booster",
            "label": "boosterConfig",
            "type": "t_contract(IBoosterConfig)26321",
            "src": "contracts/nft/Booster.sol:43"
          },
          {
            "contract": "Booster",
            "label": "latte",
            "type": "t_contract(IERC20Upgradeable)1743",
            "src": "contracts/nft/Booster.sol:44"
          },
          {
            "contract": "Booster",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)26580",
            "src": "contracts/nft/Booster.sol:45"
          },
          {
            "contract": "Booster",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/nft/Booster.sol:46"
          },
          {
            "contract": "Booster",
            "label": "userInfo",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)20780_storage))",
            "src": "contracts/nft/Booster.sol:58"
          },
          {
            "contract": "Booster",
            "label": "totalAccumBoostedReward",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/nft/Booster.sol:60"
          },
          {
            "contract": "Booster",
            "label": "userStakingNFT",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(NFTStakingInfo)20785_storage))",
            "src": "contracts/nft/Booster.sol:61"
          },
          {
            "contract": "Booster",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/nft/Booster.sol:63"
          }
        ],
        "types": {
          "t_contract(IMasterBarista)15959": {
            "label": "contract IMasterBarista"
          },
          "t_contract(IBoosterConfig)26321": {
            "label": "contract IBoosterConfig"
          },
          "t_contract(IERC20Upgradeable)1743": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IWNativeRelayer)26580": {
            "label": "contract IWNativeRelayer"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)20780_storage))": {
            "label": "mapping(address => mapping(address => struct Booster.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)20780_storage)": {
            "label": "mapping(address => struct Booster.UserInfo)"
          },
          "t_struct(UserInfo)20780_storage": {
            "label": "struct Booster.UserInfo",
            "members": [
              {
                "label": "accumBoostedReward",
                "type": "t_uint256"
              },
              {
                "label": "lastUserActionTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(NFTStakingInfo)20785_storage))": {
            "label": "mapping(address => mapping(address => struct Booster.NFTStakingInfo))"
          },
          "t_mapping(t_address,t_struct(NFTStakingInfo)20785_storage)": {
            "label": "mapping(address => struct Booster.NFTStakingInfo)"
          },
          "t_struct(NFTStakingInfo)20785_storage": {
            "label": "struct Booster.NFTStakingInfo",
            "members": [
              {
                "label": "nftAddress",
                "type": "t_address"
              },
              {
                "label": "nftTokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)39_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)39_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4414_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4414_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4149_storage"
              }
            ]
          },
          "t_struct(Set)4149_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d3a02ee0980c799efe96370d787f45c8673c9bca23bc51fb22e9a67af89086ed": {
      "address": "0xFbfd005367f81De672101f80902F5BB216532B24",
      "txHash": "0x889ab5dee51e6f192bf69ae8ee501fd7d49d4e1ca6a980f0ba03c851055ff605",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "OGOwnerToken",
            "label": "timelock",
            "type": "t_address",
            "src": "contracts/nft/OGOwnerToken.sol:12"
          },
          {
            "contract": "OGOwnerToken",
            "label": "okHolders",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/nft/OGOwnerToken.sol:14"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e91d91c083fdbb208af51f72d7535e3f3b692b9f471e1bec664649523ea39105": {
      "address": "0xBfA0219aCa3bDdc8Cc4Ac635c728aF2CE85F8BE7",
      "txHash": "0x6c3c703bc553678482dd774063e3bc47709cf3bb07c35d480b0a0f55e9fbf81a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "MasterBarista",
            "label": "latte",
            "type": "t_contract(ILATTE)15808",
            "src": "contracts/farm/MasterBarista.sol:41"
          },
          {
            "contract": "MasterBarista",
            "label": "bean",
            "type": "t_contract(IBeanBag)15715",
            "src": "contracts/farm/MasterBarista.sol:43"
          },
          {
            "contract": "MasterBarista",
            "label": "devAddr",
            "type": "t_address",
            "src": "contracts/farm/MasterBarista.sol:45"
          },
          {
            "contract": "MasterBarista",
            "label": "devFeeBps",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:46"
          },
          {
            "contract": "MasterBarista",
            "label": "lattePerBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:48"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusMultiplier",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:50"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusEndBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:52"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusLockUpBps",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:54"
          },
          {
            "contract": "MasterBarista",
            "label": "pools",
            "type": "t_struct(List)15979_storage",
            "src": "contracts/farm/MasterBarista.sol:59"
          },
          {
            "contract": "MasterBarista",
            "label": "poolInfo",
            "type": "t_mapping(t_address,t_struct(PoolInfo)13071_storage)",
            "src": "contracts/farm/MasterBarista.sol:61"
          },
          {
            "contract": "MasterBarista",
            "label": "userInfo",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)13060_storage))",
            "src": "contracts/farm/MasterBarista.sol:63"
          },
          {
            "contract": "MasterBarista",
            "label": "totalAllocPoint",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:65"
          },
          {
            "contract": "MasterBarista",
            "label": "startBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:67"
          },
          {
            "contract": "MasterBarista",
            "label": "stakeTokenCallerAllowancePool",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/farm/MasterBarista.sol:70"
          },
          {
            "contract": "MasterBarista",
            "label": "stakeTokenCallerContracts",
            "type": "t_mapping(t_address,t_struct(List)15979_storage)",
            "src": "contracts/farm/MasterBarista.sol:73"
          }
        ],
        "types": {
          "t_contract(ILATTE)15808": {
            "label": "contract ILATTE"
          },
          "t_contract(IBeanBag)15715": {
            "label": "contract IBeanBag"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(List)15979_storage": {
            "label": "struct LinkList.List",
            "members": [
              {
                "label": "llSize",
                "type": "t_uint256"
              },
              {
                "label": "next",
                "type": "t_mapping(t_address,t_address)"
              }
            ]
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_struct(PoolInfo)13071_storage)": {
            "label": "mapping(address => struct MasterBarista.PoolInfo)"
          },
          "t_struct(PoolInfo)13071_storage": {
            "label": "struct MasterBarista.PoolInfo",
            "members": [
              {
                "label": "allocPoint",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256"
              },
              {
                "label": "accLattePerShare",
                "type": "t_uint256"
              },
              {
                "label": "accLattePerShareTilBonusEnd",
                "type": "t_uint256"
              },
              {
                "label": "allocBps",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)13060_storage))": {
            "label": "mapping(address => mapping(address => struct MasterBarista.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)13060_storage)": {
            "label": "mapping(address => struct MasterBarista.UserInfo)"
          },
          "t_struct(UserInfo)13060_storage": {
            "label": "struct MasterBarista.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              },
              {
                "label": "bonusDebt",
                "type": "t_uint256"
              },
              {
                "label": "fundedBy",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(List)15979_storage)": {
            "label": "mapping(address => struct LinkList.List)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7b67876b139faeab388bc0f09b01565380c307d3cc7b16d5199e8640d000456a": {
      "address": "0xB76f9C77e21b47ad88DA16E8A102d25B069d3f01",
      "txHash": "0x24700b167a435ee9f9149e730811f1cceb3215cc93438f8dc34d51092a33294e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "MasterBarista",
            "label": "latte",
            "type": "t_contract(ILATTE)15827",
            "src": "contracts/farm/MasterBarista.sol:41"
          },
          {
            "contract": "MasterBarista",
            "label": "bean",
            "type": "t_contract(IBeanBag)15734",
            "src": "contracts/farm/MasterBarista.sol:43"
          },
          {
            "contract": "MasterBarista",
            "label": "devAddr",
            "type": "t_address",
            "src": "contracts/farm/MasterBarista.sol:45"
          },
          {
            "contract": "MasterBarista",
            "label": "devFeeBps",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:46"
          },
          {
            "contract": "MasterBarista",
            "label": "lattePerBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:48"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusMultiplier",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:50"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusEndBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:52"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusLockUpBps",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:54"
          },
          {
            "contract": "MasterBarista",
            "label": "pools",
            "type": "t_struct(List)15998_storage",
            "src": "contracts/farm/MasterBarista.sol:59"
          },
          {
            "contract": "MasterBarista",
            "label": "poolInfo",
            "type": "t_mapping(t_address,t_struct(PoolInfo)13071_storage)",
            "src": "contracts/farm/MasterBarista.sol:61"
          },
          {
            "contract": "MasterBarista",
            "label": "userInfo",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)13060_storage))",
            "src": "contracts/farm/MasterBarista.sol:63"
          },
          {
            "contract": "MasterBarista",
            "label": "totalAllocPoint",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:65"
          },
          {
            "contract": "MasterBarista",
            "label": "startBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:67"
          },
          {
            "contract": "MasterBarista",
            "label": "stakeTokenCallerAllowancePool",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/farm/MasterBarista.sol:70"
          },
          {
            "contract": "MasterBarista",
            "label": "stakeTokenCallerContracts",
            "type": "t_mapping(t_address,t_struct(List)15998_storage)",
            "src": "contracts/farm/MasterBarista.sol:73"
          }
        ],
        "types": {
          "t_contract(ILATTE)15827": {
            "label": "contract ILATTE"
          },
          "t_contract(IBeanBag)15734": {
            "label": "contract IBeanBag"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(List)15998_storage": {
            "label": "struct LinkList.List",
            "members": [
              {
                "label": "llSize",
                "type": "t_uint256"
              },
              {
                "label": "next",
                "type": "t_mapping(t_address,t_address)"
              }
            ]
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_struct(PoolInfo)13071_storage)": {
            "label": "mapping(address => struct MasterBarista.PoolInfo)"
          },
          "t_struct(PoolInfo)13071_storage": {
            "label": "struct MasterBarista.PoolInfo",
            "members": [
              {
                "label": "allocPoint",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256"
              },
              {
                "label": "accLattePerShare",
                "type": "t_uint256"
              },
              {
                "label": "accLattePerShareTilBonusEnd",
                "type": "t_uint256"
              },
              {
                "label": "allocBps",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)13060_storage))": {
            "label": "mapping(address => mapping(address => struct MasterBarista.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)13060_storage)": {
            "label": "mapping(address => struct MasterBarista.UserInfo)"
          },
          "t_struct(UserInfo)13060_storage": {
            "label": "struct MasterBarista.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              },
              {
                "label": "bonusDebt",
                "type": "t_uint256"
              },
              {
                "label": "fundedBy",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(List)15998_storage)": {
            "label": "mapping(address => struct LinkList.List)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "cd4da84f7ea3f89f1ac055a418983bd38af4a31ff6420909327567097a20bb3f": {
      "address": "0x5E1b26DA47A5F24954c25a747f2c6a52203e1889",
      "txHash": "0xca20e57c0a99b61b92869470696415482ca7a63d521bb9f558fd07adc6a5959b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "BoosterConfig",
            "label": "_boosterEnergyInfo",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(BoosterEnergyInfo)22060_storage))",
            "src": "contracts/nft/BoosterConfig.sol:73"
          },
          {
            "contract": "BoosterConfig",
            "label": "_categoryEnergyInfo",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(CategoryEnergyInfo)22067_storage))",
            "src": "contracts/nft/BoosterConfig.sol:74"
          },
          {
            "contract": "BoosterConfig",
            "label": "_boosterNftAllowance",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_bool)))",
            "src": "contracts/nft/BoosterConfig.sol:76"
          },
          {
            "contract": "BoosterConfig",
            "label": "_categoryNftAllowance",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_bool)))",
            "src": "contracts/nft/BoosterConfig.sol:77"
          },
          {
            "contract": "BoosterConfig",
            "label": "stakeTokenAllowance",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/nft/BoosterConfig.sol:79"
          },
          {
            "contract": "BoosterConfig",
            "label": "callerAllowance",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/nft/BoosterConfig.sol:81"
          }
        ],
        "types": {
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(BoosterEnergyInfo)22060_storage))": {
            "label": "mapping(address => mapping(uint256 => struct BoosterConfig.BoosterEnergyInfo))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_uint256,t_struct(BoosterEnergyInfo)22060_storage)": {
            "label": "mapping(uint256 => struct BoosterConfig.BoosterEnergyInfo)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(BoosterEnergyInfo)22060_storage": {
            "label": "struct BoosterConfig.BoosterEnergyInfo",
            "members": [
              {
                "label": "maxEnergy",
                "type": "t_uint256"
              },
              {
                "label": "currentEnergy",
                "type": "t_uint256"
              },
              {
                "label": "boostBps",
                "type": "t_uint256"
              },
              {
                "label": "updatedAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(CategoryEnergyInfo)22067_storage))": {
            "label": "mapping(address => mapping(uint256 => struct BoosterConfig.CategoryEnergyInfo))"
          },
          "t_mapping(t_uint256,t_struct(CategoryEnergyInfo)22067_storage)": {
            "label": "mapping(uint256 => struct BoosterConfig.CategoryEnergyInfo)"
          },
          "t_struct(CategoryEnergyInfo)22067_storage": {
            "label": "struct BoosterConfig.CategoryEnergyInfo",
            "members": [
              {
                "label": "maxEnergy",
                "type": "t_uint256"
              },
              {
                "label": "boostBps",
                "type": "t_uint256"
              },
              {
                "label": "updatedAt",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_bool)))": {
            "label": "mapping(address => mapping(address => mapping(uint256 => bool)))"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ed05ddb3b17e2e2cb70e438f0271437c594f8d46e37c8831053f8eae4bda870c": {
      "address": "0x71624aE933c298148Cb5c4304A54678078d32f39",
      "txHash": "0x23e850b3b3b1d904d04929470981d7e84bb6e7692e683a35feb329f7409f909b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)39_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Booster",
            "label": "masterBarista",
            "type": "t_contract(IMasterBarista)15959",
            "src": "contracts/nft/Booster.sol:42"
          },
          {
            "contract": "Booster",
            "label": "boosterConfig",
            "type": "t_contract(IBoosterConfig)26333",
            "src": "contracts/nft/Booster.sol:43"
          },
          {
            "contract": "Booster",
            "label": "latte",
            "type": "t_contract(IERC20Upgradeable)1743",
            "src": "contracts/nft/Booster.sol:44"
          },
          {
            "contract": "Booster",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)26592",
            "src": "contracts/nft/Booster.sol:45"
          },
          {
            "contract": "Booster",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/nft/Booster.sol:46"
          },
          {
            "contract": "Booster",
            "label": "userInfo",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)20780_storage))",
            "src": "contracts/nft/Booster.sol:58"
          },
          {
            "contract": "Booster",
            "label": "totalAccumBoostedReward",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/nft/Booster.sol:60"
          },
          {
            "contract": "Booster",
            "label": "userStakingNFT",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(NFTStakingInfo)20785_storage))",
            "src": "contracts/nft/Booster.sol:61"
          },
          {
            "contract": "Booster",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/nft/Booster.sol:63"
          }
        ],
        "types": {
          "t_contract(IMasterBarista)15959": {
            "label": "contract IMasterBarista"
          },
          "t_contract(IBoosterConfig)26333": {
            "label": "contract IBoosterConfig"
          },
          "t_contract(IERC20Upgradeable)1743": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IWNativeRelayer)26592": {
            "label": "contract IWNativeRelayer"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)20780_storage))": {
            "label": "mapping(address => mapping(address => struct Booster.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)20780_storage)": {
            "label": "mapping(address => struct Booster.UserInfo)"
          },
          "t_struct(UserInfo)20780_storage": {
            "label": "struct Booster.UserInfo",
            "members": [
              {
                "label": "accumBoostedReward",
                "type": "t_uint256"
              },
              {
                "label": "lastUserActionTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(NFTStakingInfo)20785_storage))": {
            "label": "mapping(address => mapping(address => struct Booster.NFTStakingInfo))"
          },
          "t_mapping(t_address,t_struct(NFTStakingInfo)20785_storage)": {
            "label": "mapping(address => struct Booster.NFTStakingInfo)"
          },
          "t_struct(NFTStakingInfo)20785_storage": {
            "label": "struct Booster.NFTStakingInfo",
            "members": [
              {
                "label": "nftAddress",
                "type": "t_address"
              },
              {
                "label": "nftTokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)39_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)39_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4414_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4414_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4149_storage"
              }
            ]
          },
          "t_struct(Set)4149_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "c29dee5f7ba7efb24564432835b2071d24aa545b2d39501a85ab09b7b5328bd0": {
      "address": "0x1a8244Ca6273C5B38D9027aBC6c47a018FE96689",
      "txHash": "0xe7f5f6f787845ad09751111a3e6ca6b1bfb0f384e7cee43807cdd7bfd409691c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4535_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3912_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:485"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721PausableUpgradeable.sol:38"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)39_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "LatteNFT",
            "label": "_tokenIds",
            "type": "t_struct(Counter)3538_storage",
            "src": "contracts/nft/LatteNFT.sol:29"
          },
          {
            "contract": "LatteNFT",
            "label": "_categoryIds",
            "type": "t_struct(Counter)3538_storage",
            "src": "contracts/nft/LatteNFT.sol:32"
          },
          {
            "contract": "LatteNFT",
            "label": "latteNames",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/nft/LatteNFT.sol:35"
          },
          {
            "contract": "LatteNFT",
            "label": "categoryInfo",
            "type": "t_mapping(t_uint256,t_struct(Category)24615_storage)",
            "src": "contracts/nft/LatteNFT.sol:37"
          },
          {
            "contract": "LatteNFT",
            "label": "latteNFTToCategory",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/nft/LatteNFT.sol:39"
          },
          {
            "contract": "LatteNFT",
            "label": "_categoryToLatteNFTList",
            "type": "t_mapping(t_uint256,t_struct(UintSet)4535_storage)",
            "src": "contracts/nft/LatteNFT.sol:41"
          },
          {
            "contract": "LatteNFT",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/nft/LatteNFT.sol:43"
          }
        ],
        "types": {
          "t_struct(Counter)3538_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_struct(Category)24615_storage)": {
            "label": "mapping(uint256 => struct LatteNFT.Category)"
          },
          "t_struct(Category)24615_storage": {
            "label": "struct LatteNFT.Category",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "categoryURI",
                "type": "t_string_storage"
              },
              {
                "label": "timestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(UintSet)4535_storage)": {
            "label": "mapping(uint256 => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)4535_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4149_storage"
              }
            ]
          },
          "t_struct(Set)4149_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)39_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)39_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4414_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4414_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4149_storage"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(UintSet)4535_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintToAddressMap)3912_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3594_storage"
              }
            ]
          },
          "t_struct(Map)3594_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3586_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3586_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)3586_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "b557b119c376a3ede1d35fbcfb6021975837ec337565f276bbe42fa373608d00": {
      "address": "0x3273659F5A920d6784eefA2d45b06aB27d553311",
      "txHash": "0xf8c9ec12440d306d4776176772fafa4cca7e79d4f6399a157c02b056f3cd60dc",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4535_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3912_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:485"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721PausableUpgradeable.sol:38"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)39_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "LatteNFT",
            "label": "_tokenIds",
            "type": "t_struct(Counter)3538_storage",
            "src": "contracts/nft/LatteNFT.sol:29"
          },
          {
            "contract": "LatteNFT",
            "label": "_categoryIds",
            "type": "t_struct(Counter)3538_storage",
            "src": "contracts/nft/LatteNFT.sol:32"
          },
          {
            "contract": "LatteNFT",
            "label": "latteNames",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/nft/LatteNFT.sol:35"
          },
          {
            "contract": "LatteNFT",
            "label": "categoryInfo",
            "type": "t_mapping(t_uint256,t_struct(Category)24615_storage)",
            "src": "contracts/nft/LatteNFT.sol:37"
          },
          {
            "contract": "LatteNFT",
            "label": "latteNFTToCategory",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/nft/LatteNFT.sol:39"
          },
          {
            "contract": "LatteNFT",
            "label": "_categoryToLatteNFTList",
            "type": "t_mapping(t_uint256,t_struct(UintSet)4535_storage)",
            "src": "contracts/nft/LatteNFT.sol:41"
          },
          {
            "contract": "LatteNFT",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/nft/LatteNFT.sol:43"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "OGNFT",
            "label": "ogOwnerToken",
            "type": "t_mapping(t_uint256,t_contract(IOGOwnerToken)26487)",
            "src": "contracts/nft/OGNFT.sol:25"
          },
          {
            "contract": "OGNFT",
            "label": "masterBarista",
            "type": "t_contract(IMasterBarista)15959",
            "src": "contracts/nft/OGNFT.sol:27"
          },
          {
            "contract": "OGNFT",
            "label": "latte",
            "type": "t_contract(IERC20Upgradeable)1743",
            "src": "contracts/nft/OGNFT.sol:28"
          },
          {
            "contract": "OGNFT",
            "label": "_userStakeTokenIds",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UintSet)4535_storage))",
            "src": "contracts/nft/OGNFT.sol:29"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_contract(IOGOwnerToken)26487)": {
            "label": "mapping(uint256 => contract IOGOwnerToken)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IOGOwnerToken)26487": {
            "label": "contract IOGOwnerToken"
          },
          "t_contract(IMasterBarista)15959": {
            "label": "contract IMasterBarista"
          },
          "t_contract(IERC20Upgradeable)1743": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(UintSet)4535_storage))": {
            "label": "mapping(uint256 => mapping(address => struct EnumerableSetUpgradeable.UintSet))"
          },
          "t_mapping(t_address,t_struct(UintSet)4535_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)4535_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4149_storage"
              }
            ]
          },
          "t_struct(Set)4149_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)3538_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_struct(Category)24615_storage)": {
            "label": "mapping(uint256 => struct LatteNFT.Category)"
          },
          "t_struct(Category)24615_storage": {
            "label": "struct LatteNFT.Category",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "categoryURI",
                "type": "t_string_storage"
              },
              {
                "label": "timestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(UintSet)4535_storage)": {
            "label": "mapping(uint256 => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)39_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)39_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4414_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4414_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4149_storage"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_struct(UintToAddressMap)3912_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3594_storage"
              }
            ]
          },
          "t_struct(Map)3594_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3586_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3586_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)3586_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "42675dc3cc8151d3c0652215017924bd6929ff9cfcd698b95e01ab425b92b043": {
      "address": "0x2670D62f260656d9984E0c8f0322a10Bf596Ecf6",
      "txHash": "0xe611599f0fa3e3e19f8e80c6b2d05cd33ad0ac63b08e0fa3b5bd0ec28955afa0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)39_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Booster",
            "label": "masterBarista",
            "type": "t_contract(IMasterBarista)16020",
            "src": "contracts/nft/Booster.sol:42"
          },
          {
            "contract": "Booster",
            "label": "boosterConfig",
            "type": "t_contract(IBoosterConfig)24594",
            "src": "contracts/nft/Booster.sol:43"
          },
          {
            "contract": "Booster",
            "label": "latte",
            "type": "t_contract(IERC20Upgradeable)1743",
            "src": "contracts/nft/Booster.sol:44"
          },
          {
            "contract": "Booster",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)25031",
            "src": "contracts/nft/Booster.sol:45"
          },
          {
            "contract": "Booster",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/nft/Booster.sol:46"
          },
          {
            "contract": "Booster",
            "label": "userInfo",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)17094_storage))",
            "src": "contracts/nft/Booster.sol:58"
          },
          {
            "contract": "Booster",
            "label": "totalAccumBoostedReward",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/nft/Booster.sol:60"
          },
          {
            "contract": "Booster",
            "label": "userStakingNFT",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(NFTStakingInfo)17099_storage))",
            "src": "contracts/nft/Booster.sol:61"
          },
          {
            "contract": "Booster",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/nft/Booster.sol:63"
          }
        ],
        "types": {
          "t_contract(IMasterBarista)16020": {
            "label": "contract IMasterBarista"
          },
          "t_contract(IBoosterConfig)24594": {
            "label": "contract IBoosterConfig"
          },
          "t_contract(IERC20Upgradeable)1743": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IWNativeRelayer)25031": {
            "label": "contract IWNativeRelayer"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)17094_storage))": {
            "label": "mapping(address => mapping(address => struct Booster.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)17094_storage)": {
            "label": "mapping(address => struct Booster.UserInfo)"
          },
          "t_struct(UserInfo)17094_storage": {
            "label": "struct Booster.UserInfo",
            "members": [
              {
                "label": "accumBoostedReward",
                "type": "t_uint256"
              },
              {
                "label": "lastUserActionTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(NFTStakingInfo)17099_storage))": {
            "label": "mapping(address => mapping(address => struct Booster.NFTStakingInfo))"
          },
          "t_mapping(t_address,t_struct(NFTStakingInfo)17099_storage)": {
            "label": "mapping(address => struct Booster.NFTStakingInfo)"
          },
          "t_struct(NFTStakingInfo)17099_storage": {
            "label": "struct Booster.NFTStakingInfo",
            "members": [
              {
                "label": "nftAddress",
                "type": "t_address"
              },
              {
                "label": "nftTokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)39_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)39_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4414_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4414_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4149_storage"
              }
            ]
          },
          "t_struct(Set)4149_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "206ac1db0adee18b2ce37c8e894b9b8688b24ffcb7e7d578e91c1de6b8f309be": {
      "address": "0xfCcC57f1Fc132BACe5D4D6276dCb7D6Fb7a81eB6",
      "txHash": "0x888ba441d542fed37778334d2c213e4a2f39cd4c735cd31467d48c54997affee",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "MasterBarista",
            "label": "latte",
            "type": "t_contract(ILATTE)15886",
            "src": "contracts/farm/MasterBarista.sol:41"
          },
          {
            "contract": "MasterBarista",
            "label": "bean",
            "type": "t_contract(IBeanBag)15793",
            "src": "contracts/farm/MasterBarista.sol:43"
          },
          {
            "contract": "MasterBarista",
            "label": "devAddr",
            "type": "t_address",
            "src": "contracts/farm/MasterBarista.sol:45"
          },
          {
            "contract": "MasterBarista",
            "label": "devFeeBps",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:46"
          },
          {
            "contract": "MasterBarista",
            "label": "lattePerBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:48"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusMultiplier",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:50"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusEndBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:52"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusLockUpBps",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:54"
          },
          {
            "contract": "MasterBarista",
            "label": "pools",
            "type": "t_struct(List)16061_storage",
            "src": "contracts/farm/MasterBarista.sol:59"
          },
          {
            "contract": "MasterBarista",
            "label": "poolInfo",
            "type": "t_mapping(t_address,t_struct(PoolInfo)12984_storage)",
            "src": "contracts/farm/MasterBarista.sol:61"
          },
          {
            "contract": "MasterBarista",
            "label": "userInfo",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)12973_storage))",
            "src": "contracts/farm/MasterBarista.sol:63"
          },
          {
            "contract": "MasterBarista",
            "label": "totalAllocPoint",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:65"
          },
          {
            "contract": "MasterBarista",
            "label": "startBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:67"
          },
          {
            "contract": "MasterBarista",
            "label": "stakeTokenCallerAllowancePool",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/farm/MasterBarista.sol:70"
          },
          {
            "contract": "MasterBarista",
            "label": "stakeTokenCallerContracts",
            "type": "t_mapping(t_address,t_struct(List)16061_storage)",
            "src": "contracts/farm/MasterBarista.sol:73"
          }
        ],
        "types": {
          "t_contract(ILATTE)15886": {
            "label": "contract ILATTE"
          },
          "t_contract(IBeanBag)15793": {
            "label": "contract IBeanBag"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(List)16061_storage": {
            "label": "struct LinkList.List",
            "members": [
              {
                "label": "llSize",
                "type": "t_uint256"
              },
              {
                "label": "next",
                "type": "t_mapping(t_address,t_address)"
              }
            ]
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_struct(PoolInfo)12984_storage)": {
            "label": "mapping(address => struct MasterBarista.PoolInfo)"
          },
          "t_struct(PoolInfo)12984_storage": {
            "label": "struct MasterBarista.PoolInfo",
            "members": [
              {
                "label": "allocPoint",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256"
              },
              {
                "label": "accLattePerShare",
                "type": "t_uint256"
              },
              {
                "label": "accLattePerShareTilBonusEnd",
                "type": "t_uint256"
              },
              {
                "label": "allocBps",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)12973_storage))": {
            "label": "mapping(address => mapping(address => struct MasterBarista.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)12973_storage)": {
            "label": "mapping(address => struct MasterBarista.UserInfo)"
          },
          "t_struct(UserInfo)12973_storage": {
            "label": "struct MasterBarista.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              },
              {
                "label": "bonusDebt",
                "type": "t_uint256"
              },
              {
                "label": "fundedBy",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(List)16061_storage)": {
            "label": "mapping(address => struct LinkList.List)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a515028d2cb50ea766ae4f064632f2e9444cfd0d43abf3c13f30e36402e15ada": {
      "address": "0xd696536426FefB400874C509a0E198A8D0542cec",
      "txHash": "0xbe435499ad2d4eb05d6a2f0b6a52e2b36e52061d28f82c8e9b91986325db7cad",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4535_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3912_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:485"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721PausableUpgradeable.sol:38"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)39_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "LatteNFT",
            "label": "_tokenIds",
            "type": "t_struct(Counter)3538_storage",
            "src": "contracts/nft/LatteNFT.sol:29"
          },
          {
            "contract": "LatteNFT",
            "label": "_categoryIds",
            "type": "t_struct(Counter)3538_storage",
            "src": "contracts/nft/LatteNFT.sol:32"
          },
          {
            "contract": "LatteNFT",
            "label": "latteNames",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/nft/LatteNFT.sol:35"
          },
          {
            "contract": "LatteNFT",
            "label": "categoryInfo",
            "type": "t_mapping(t_uint256,t_struct(Category)20937_storage)",
            "src": "contracts/nft/LatteNFT.sol:37"
          },
          {
            "contract": "LatteNFT",
            "label": "latteNFTToCategory",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/nft/LatteNFT.sol:39"
          },
          {
            "contract": "LatteNFT",
            "label": "_categoryToLatteNFTList",
            "type": "t_mapping(t_uint256,t_struct(UintSet)4535_storage)",
            "src": "contracts/nft/LatteNFT.sol:41"
          },
          {
            "contract": "LatteNFT",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/nft/LatteNFT.sol:43"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "OGNFT",
            "label": "ogOwnerToken",
            "type": "t_mapping(t_uint256,t_contract(IOGOwnerToken)23875)",
            "src": "contracts/nft/OGNFT.sol:25"
          },
          {
            "contract": "OGNFT",
            "label": "masterBarista",
            "type": "t_contract(IMasterBarista)16020",
            "src": "contracts/nft/OGNFT.sol:27"
          },
          {
            "contract": "OGNFT",
            "label": "latte",
            "type": "t_contract(IERC20Upgradeable)1743",
            "src": "contracts/nft/OGNFT.sol:28"
          },
          {
            "contract": "OGNFT",
            "label": "_userStakeTokenIds",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UintSet)4535_storage))",
            "src": "contracts/nft/OGNFT.sol:29"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_contract(IOGOwnerToken)23875)": {
            "label": "mapping(uint256 => contract IOGOwnerToken)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IOGOwnerToken)23875": {
            "label": "contract IOGOwnerToken"
          },
          "t_contract(IMasterBarista)16020": {
            "label": "contract IMasterBarista"
          },
          "t_contract(IERC20Upgradeable)1743": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(UintSet)4535_storage))": {
            "label": "mapping(uint256 => mapping(address => struct EnumerableSetUpgradeable.UintSet))"
          },
          "t_mapping(t_address,t_struct(UintSet)4535_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)4535_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4149_storage"
              }
            ]
          },
          "t_struct(Set)4149_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)3538_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_struct(Category)20937_storage)": {
            "label": "mapping(uint256 => struct LatteNFT.Category)"
          },
          "t_struct(Category)20937_storage": {
            "label": "struct LatteNFT.Category",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "categoryURI",
                "type": "t_string_storage"
              },
              {
                "label": "timestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(UintSet)4535_storage)": {
            "label": "mapping(uint256 => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)39_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)39_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4414_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4414_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4149_storage"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_struct(UintToAddressMap)3912_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3594_storage"
              }
            ]
          },
          "t_struct(Map)3594_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3586_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3586_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)3586_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "52425e58d0c4af5af3ab0fd29a9be70599f0b65b21ec6c47b5d2cbcdf474461a": {
      "address": "0xF2132c36C5847c1D7bFFcbf0b51F1f0a601eeD11",
      "txHash": "0xfca51a3139c283ed8541138a4a296415fd6f2d56055b0527269f2c908c626e3f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4535_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3912_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:485"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721PausableUpgradeable.sol:38"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)39_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "LatteNFT",
            "label": "_tokenIds",
            "type": "t_struct(Counter)3538_storage",
            "src": "contracts/nft/LatteNFT.sol:29"
          },
          {
            "contract": "LatteNFT",
            "label": "_categoryIds",
            "type": "t_struct(Counter)3538_storage",
            "src": "contracts/nft/LatteNFT.sol:32"
          },
          {
            "contract": "LatteNFT",
            "label": "latteNames",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/nft/LatteNFT.sol:35"
          },
          {
            "contract": "LatteNFT",
            "label": "categoryInfo",
            "type": "t_mapping(t_uint256,t_struct(Category)20937_storage)",
            "src": "contracts/nft/LatteNFT.sol:37"
          },
          {
            "contract": "LatteNFT",
            "label": "latteNFTToCategory",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/nft/LatteNFT.sol:39"
          },
          {
            "contract": "LatteNFT",
            "label": "_categoryToLatteNFTList",
            "type": "t_mapping(t_uint256,t_struct(UintSet)4535_storage)",
            "src": "contracts/nft/LatteNFT.sol:41"
          },
          {
            "contract": "LatteNFT",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/nft/LatteNFT.sol:43"
          }
        ],
        "types": {
          "t_struct(Counter)3538_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_struct(Category)20937_storage)": {
            "label": "mapping(uint256 => struct LatteNFT.Category)"
          },
          "t_struct(Category)20937_storage": {
            "label": "struct LatteNFT.Category",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "categoryURI",
                "type": "t_string_storage"
              },
              {
                "label": "timestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(UintSet)4535_storage)": {
            "label": "mapping(uint256 => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)4535_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4149_storage"
              }
            ]
          },
          "t_struct(Set)4149_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)39_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)39_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4414_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4414_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4149_storage"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(UintSet)4535_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintToAddressMap)3912_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3594_storage"
              }
            ]
          },
          "t_struct(Map)3594_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3586_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3586_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)3586_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "e11e3afe7a93d9496027f7c0232c98f6bfa5b83ab602a5d44b9d006261b75fe6": {
      "address": "0x5fB12DEb630bF4d6dB3cEB45A3B03060bFF8AA0B",
      "txHash": "0x0dba33e3b62224a04f5a7fffeff7d7ae7ac0f1a900cda47418f71988fe29a668",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721HolderUpgradeable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)39_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "LatteMarket",
            "label": "isNFTSupported",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/nft/LatteMarket.sol:50"
          },
          {
            "contract": "LatteMarket",
            "label": "feeAddr",
            "type": "t_address",
            "src": "contracts/nft/LatteMarket.sol:51"
          },
          {
            "contract": "LatteMarket",
            "label": "feePercentBps",
            "type": "t_uint256",
            "src": "contracts/nft/LatteMarket.sol:52"
          },
          {
            "contract": "LatteMarket",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)25031",
            "src": "contracts/nft/LatteMarket.sol:53"
          },
          {
            "contract": "LatteMarket",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/nft/LatteMarket.sol:54"
          },
          {
            "contract": "LatteMarket",
            "label": "tokenCategorySellers",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "src": "contracts/nft/LatteMarket.sol:55"
          },
          {
            "contract": "LatteMarket",
            "label": "tokenBid",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(BidEntry)19184_storage))",
            "src": "contracts/nft/LatteMarket.sol:56"
          },
          {
            "contract": "LatteMarket",
            "label": "latteNFTMetadata",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(LatteNFTMetadata)19208_storage))",
            "src": "contracts/nft/LatteMarket.sol:59"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IWNativeRelayer)25031": {
            "label": "contract IWNativeRelayer"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(BidEntry)19184_storage))": {
            "label": "mapping(address => mapping(uint256 => struct LatteMarket.BidEntry))"
          },
          "t_mapping(t_uint256,t_struct(BidEntry)19184_storage)": {
            "label": "mapping(uint256 => struct LatteMarket.BidEntry)"
          },
          "t_struct(BidEntry)19184_storage": {
            "label": "struct LatteMarket.BidEntry",
            "members": [
              {
                "label": "bidder",
                "type": "t_address"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(LatteNFTMetadata)19208_storage))": {
            "label": "mapping(address => mapping(uint256 => struct LatteMarket.LatteNFTMetadata))"
          },
          "t_mapping(t_uint256,t_struct(LatteNFTMetadata)19208_storage)": {
            "label": "mapping(uint256 => struct LatteMarket.LatteNFTMetadata)"
          },
          "t_struct(LatteNFTMetadata)19208_storage": {
            "label": "struct LatteMarket.LatteNFTMetadata",
            "members": [
              {
                "label": "cap",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "isBidding",
                "type": "t_bool"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "quoteBep20",
                "type": "t_contract(IERC20Upgradeable)1743"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)1743": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)39_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)39_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4414_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4414_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4149_storage"
              }
            ]
          },
          "t_struct(Set)4149_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "b2daa7302ebe276718f1ec0790032587ba8ec5fe766f03cd59741c5ffeb78a10": {
      "address": "0xac575eCaBB3B57A04E8039D1D5b6475d19F838ef",
      "txHash": "0xa939805bfdbde2000b3965ac76f68ae8c809111847cea9a2b3452900a5818921",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "OGOwnerToken",
            "label": "timelock",
            "type": "t_address",
            "src": "contracts/nft/OGOwnerToken.sol:12"
          },
          {
            "contract": "OGOwnerToken",
            "label": "okHolders",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/nft/OGOwnerToken.sol:14"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "575da686f8fe1ff35879aa7b9d80b749d650c5e153d9a5184d0a289b77351c8a": {
      "address": "0x093a14418279133259c6a526618F26CAaC8E0c2D",
      "txHash": "0xb5ccd7bf87b6c34fde715b6b668ba847abdbfd3ac862dc2207423e93433d5f0f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721HolderUpgradeable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)39_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "OGNFTOffering",
            "label": "ogNFT",
            "type": "t_address",
            "src": "contracts/nft/OGNFTOffering.sol:50"
          },
          {
            "contract": "OGNFTOffering",
            "label": "feeAddr",
            "type": "t_address",
            "src": "contracts/nft/OGNFTOffering.sol:51"
          },
          {
            "contract": "OGNFTOffering",
            "label": "feePercentBps",
            "type": "t_uint256",
            "src": "contracts/nft/OGNFTOffering.sol:52"
          },
          {
            "contract": "OGNFTOffering",
            "label": "buyLimitCount",
            "type": "t_uint256",
            "src": "contracts/nft/OGNFTOffering.sol:53"
          },
          {
            "contract": "OGNFTOffering",
            "label": "buyLimitPeriod",
            "type": "t_uint256",
            "src": "contracts/nft/OGNFTOffering.sol:54"
          },
          {
            "contract": "OGNFTOffering",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)24201",
            "src": "contracts/nft/OGNFTOffering.sol:55"
          },
          {
            "contract": "OGNFTOffering",
            "label": "priceModel",
            "type": "t_contract(IOGPriceModel)23898",
            "src": "contracts/nft/OGNFTOffering.sol:56"
          },
          {
            "contract": "OGNFTOffering",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/nft/OGNFTOffering.sol:57"
          },
          {
            "contract": "OGNFTOffering",
            "label": "tokenCategorySellers",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/nft/OGNFTOffering.sol:58"
          },
          {
            "contract": "OGNFTOffering",
            "label": "ogNFTMetadata",
            "type": "t_mapping(t_uint256,t_struct(OGNFTMetadata)22406_storage)",
            "src": "contracts/nft/OGNFTOffering.sol:61"
          },
          {
            "contract": "OGNFTOffering",
            "label": "buyLimitMetadata",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(OGNFTBuyLimitMetadata)22411_storage))",
            "src": "contracts/nft/OGNFTOffering.sol:62"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IWNativeRelayer)24201": {
            "label": "contract IWNativeRelayer"
          },
          "t_contract(IOGPriceModel)23898": {
            "label": "contract IOGPriceModel"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_uint256,t_struct(OGNFTMetadata)22406_storage)": {
            "label": "mapping(uint256 => struct OGNFTOffering.OGNFTMetadata)"
          },
          "t_struct(OGNFTMetadata)22406_storage": {
            "label": "struct OGNFTOffering.OGNFTMetadata",
            "members": [
              {
                "label": "cap",
                "type": "t_uint256"
              },
              {
                "label": "maxCap",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "isBidding",
                "type": "t_bool"
              },
              {
                "label": "quoteBep20",
                "type": "t_contract(IERC20Upgradeable)1743"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IERC20Upgradeable)1743": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(OGNFTBuyLimitMetadata)22411_storage))": {
            "label": "mapping(address => mapping(uint256 => struct OGNFTOffering.OGNFTBuyLimitMetadata))"
          },
          "t_mapping(t_uint256,t_struct(OGNFTBuyLimitMetadata)22411_storage)": {
            "label": "mapping(uint256 => struct OGNFTOffering.OGNFTBuyLimitMetadata)"
          },
          "t_struct(OGNFTBuyLimitMetadata)22411_storage": {
            "label": "struct OGNFTOffering.OGNFTBuyLimitMetadata",
            "members": [
              {
                "label": "counter",
                "type": "t_uint256"
              },
              {
                "label": "cooldownStartBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)39_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)39_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4414_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4414_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4149_storage"
              }
            ]
          },
          "t_struct(Set)4149_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d40308cec9b754d3f170e75d2e9ea574465ee1ad740178e9dab3efcdad64880b": {
      "address": "0xE7599d1aC01Da3dA2C97BE5F70d1A1b9ea1e4165",
      "txHash": "0xb50425c5e5627fd222ab245e3d67a76c349be3902f89d8e62e36b60f78d5c54d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)4535_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)3912_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:43"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:46"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:49"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:52"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:55"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)41_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:485"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ERC721PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721PausableUpgradeable.sol:38"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)39_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "LatteNFT",
            "label": "_tokenIds",
            "type": "t_struct(Counter)3538_storage",
            "src": "contracts/nft/LatteNFT.sol:29"
          },
          {
            "contract": "LatteNFT",
            "label": "_categoryIds",
            "type": "t_struct(Counter)3538_storage",
            "src": "contracts/nft/LatteNFT.sol:32"
          },
          {
            "contract": "LatteNFT",
            "label": "latteNames",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/nft/LatteNFT.sol:35"
          },
          {
            "contract": "LatteNFT",
            "label": "categoryInfo",
            "type": "t_mapping(t_uint256,t_struct(Category)20937_storage)",
            "src": "contracts/nft/LatteNFT.sol:37"
          },
          {
            "contract": "LatteNFT",
            "label": "latteNFTToCategory",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "contracts/nft/LatteNFT.sol:39"
          },
          {
            "contract": "LatteNFT",
            "label": "_categoryToLatteNFTList",
            "type": "t_mapping(t_uint256,t_struct(UintSet)4535_storage)",
            "src": "contracts/nft/LatteNFT.sol:41"
          },
          {
            "contract": "LatteNFT",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "contracts/nft/LatteNFT.sol:43"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "OGNFT",
            "label": "ogOwnerToken",
            "type": "t_mapping(t_uint256,t_contract(IOGOwnerToken)23883)",
            "src": "contracts/nft/OGNFT.sol:25"
          },
          {
            "contract": "OGNFT",
            "label": "masterBarista",
            "type": "t_contract(IMasterBarista)16020",
            "src": "contracts/nft/OGNFT.sol:27"
          },
          {
            "contract": "OGNFT",
            "label": "latte",
            "type": "t_contract(IERC20Upgradeable)1743",
            "src": "contracts/nft/OGNFT.sol:28"
          },
          {
            "contract": "OGNFT",
            "label": "_userStakeTokenIds",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UintSet)4535_storage))",
            "src": "contracts/nft/OGNFT.sol:29"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_contract(IOGOwnerToken)23883)": {
            "label": "mapping(uint256 => contract IOGOwnerToken)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IOGOwnerToken)23883": {
            "label": "contract IOGOwnerToken"
          },
          "t_contract(IMasterBarista)16020": {
            "label": "contract IMasterBarista"
          },
          "t_contract(IERC20Upgradeable)1743": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(UintSet)4535_storage))": {
            "label": "mapping(uint256 => mapping(address => struct EnumerableSetUpgradeable.UintSet))"
          },
          "t_mapping(t_address,t_struct(UintSet)4535_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UintSet)4535_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4149_storage"
              }
            ]
          },
          "t_struct(Set)4149_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_struct(Counter)3538_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_struct(Category)20937_storage)": {
            "label": "mapping(uint256 => struct LatteNFT.Category)"
          },
          "t_struct(Category)20937_storage": {
            "label": "struct LatteNFT.Category",
            "members": [
              {
                "label": "name",
                "type": "t_string_storage"
              },
              {
                "label": "categoryURI",
                "type": "t_string_storage"
              },
              {
                "label": "timestamp",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_mapping(t_uint256,t_struct(UintSet)4535_storage)": {
            "label": "mapping(uint256 => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)39_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)39_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4414_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4414_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4149_storage"
              }
            ]
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_struct(UintToAddressMap)3912_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)3594_storage"
              }
            ]
          },
          "t_struct(Map)3594_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)3586_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)3586_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)3586_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_array(t_uint256)41_storage": {
            "label": "uint256[41]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "1fdbebc63d41705e11d64849333c79116ea442e5877f194a0dc71720b2f60b18": {
      "address": "0x1bd63020BE627bc6F65008301cBe4b1e6BC67951",
      "txHash": "0xd735fec50100f464a1a702998433329f50d92c19b6c377b12c72692c050bd3f5",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721HolderUpgradeable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)39_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "OGNFTOffering",
            "label": "ogNFT",
            "type": "t_address",
            "src": "contracts/nft/OGNFTOffering.sol:50"
          },
          {
            "contract": "OGNFTOffering",
            "label": "feeAddr",
            "type": "t_address",
            "src": "contracts/nft/OGNFTOffering.sol:51"
          },
          {
            "contract": "OGNFTOffering",
            "label": "feePercentBps",
            "type": "t_uint256",
            "src": "contracts/nft/OGNFTOffering.sol:52"
          },
          {
            "contract": "OGNFTOffering",
            "label": "buyLimitCount",
            "type": "t_uint256",
            "src": "contracts/nft/OGNFTOffering.sol:53"
          },
          {
            "contract": "OGNFTOffering",
            "label": "buyLimitPeriod",
            "type": "t_uint256",
            "src": "contracts/nft/OGNFTOffering.sol:54"
          },
          {
            "contract": "OGNFTOffering",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)25020",
            "src": "contracts/nft/OGNFTOffering.sol:55"
          },
          {
            "contract": "OGNFTOffering",
            "label": "priceModel",
            "type": "t_contract(IOGPriceModel)24717",
            "src": "contracts/nft/OGNFTOffering.sol:56"
          },
          {
            "contract": "OGNFTOffering",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/nft/OGNFTOffering.sol:57"
          },
          {
            "contract": "OGNFTOffering",
            "label": "tokenCategorySellers",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/nft/OGNFTOffering.sol:58"
          },
          {
            "contract": "OGNFTOffering",
            "label": "ogNFTMetadata",
            "type": "t_mapping(t_uint256,t_struct(OGNFTMetadata)23225_storage)",
            "src": "contracts/nft/OGNFTOffering.sol:61"
          },
          {
            "contract": "OGNFTOffering",
            "label": "buyLimitMetadata",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(OGNFTBuyLimitMetadata)23230_storage))",
            "src": "contracts/nft/OGNFTOffering.sol:62"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IWNativeRelayer)25020": {
            "label": "contract IWNativeRelayer"
          },
          "t_contract(IOGPriceModel)24717": {
            "label": "contract IOGPriceModel"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_uint256,t_struct(OGNFTMetadata)23225_storage)": {
            "label": "mapping(uint256 => struct OGNFTOffering.OGNFTMetadata)"
          },
          "t_struct(OGNFTMetadata)23225_storage": {
            "label": "struct OGNFTOffering.OGNFTMetadata",
            "members": [
              {
                "label": "cap",
                "type": "t_uint256"
              },
              {
                "label": "maxCap",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "isBidding",
                "type": "t_bool"
              },
              {
                "label": "quoteBep20",
                "type": "t_contract(IERC20Upgradeable)1743"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IERC20Upgradeable)1743": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(OGNFTBuyLimitMetadata)23230_storage))": {
            "label": "mapping(address => mapping(uint256 => struct OGNFTOffering.OGNFTBuyLimitMetadata))"
          },
          "t_mapping(t_uint256,t_struct(OGNFTBuyLimitMetadata)23230_storage)": {
            "label": "mapping(uint256 => struct OGNFTOffering.OGNFTBuyLimitMetadata)"
          },
          "t_struct(OGNFTBuyLimitMetadata)23230_storage": {
            "label": "struct OGNFTOffering.OGNFTBuyLimitMetadata",
            "members": [
              {
                "label": "counter",
                "type": "t_uint256"
              },
              {
                "label": "cooldownStartBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)39_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)39_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4414_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4414_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4149_storage"
              }
            ]
          },
          "t_struct(Set)4149_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3d9fb4159586a8e3fc550936b06a10ca78c8a46f8c58d56e96333dc5d7833981": {
      "address": "0xF766cF81CaDf2884EA1bdA47Fe3BC7e3D826DbE5",
      "txHash": "0xd505385c0cf67c2a435499c592b4c0ecd59b5b804aa21845348c994dd8445ca3",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721HolderUpgradeable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)39_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "OGNFTOffering",
            "label": "ogNFT",
            "type": "t_address",
            "src": "contracts/nft/OGNFTOffering.sol:50"
          },
          {
            "contract": "OGNFTOffering",
            "label": "feeAddr",
            "type": "t_address",
            "src": "contracts/nft/OGNFTOffering.sol:51"
          },
          {
            "contract": "OGNFTOffering",
            "label": "feePercentBps",
            "type": "t_uint256",
            "src": "contracts/nft/OGNFTOffering.sol:52"
          },
          {
            "contract": "OGNFTOffering",
            "label": "buyLimitCount",
            "type": "t_uint256",
            "src": "contracts/nft/OGNFTOffering.sol:53"
          },
          {
            "contract": "OGNFTOffering",
            "label": "buyLimitPeriod",
            "type": "t_uint256",
            "src": "contracts/nft/OGNFTOffering.sol:54"
          },
          {
            "contract": "OGNFTOffering",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)25041",
            "src": "contracts/nft/OGNFTOffering.sol:55"
          },
          {
            "contract": "OGNFTOffering",
            "label": "priceModel",
            "type": "t_contract(IOGPriceModel)24738",
            "src": "contracts/nft/OGNFTOffering.sol:56"
          },
          {
            "contract": "OGNFTOffering",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/nft/OGNFTOffering.sol:57"
          },
          {
            "contract": "OGNFTOffering",
            "label": "tokenCategorySellers",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "contracts/nft/OGNFTOffering.sol:58"
          },
          {
            "contract": "OGNFTOffering",
            "label": "ogNFTMetadata",
            "type": "t_mapping(t_uint256,t_struct(OGNFTMetadata)23235_storage)",
            "src": "contracts/nft/OGNFTOffering.sol:61"
          },
          {
            "contract": "OGNFTOffering",
            "label": "buyLimitMetadata",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(OGNFTBuyLimitMetadata)23240_storage))",
            "src": "contracts/nft/OGNFTOffering.sol:62"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IWNativeRelayer)25041": {
            "label": "contract IWNativeRelayer"
          },
          "t_contract(IOGPriceModel)24738": {
            "label": "contract IOGPriceModel"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_uint256,t_struct(OGNFTMetadata)23235_storage)": {
            "label": "mapping(uint256 => struct OGNFTOffering.OGNFTMetadata)"
          },
          "t_struct(OGNFTMetadata)23235_storage": {
            "label": "struct OGNFTOffering.OGNFTMetadata",
            "members": [
              {
                "label": "cap",
                "type": "t_uint256"
              },
              {
                "label": "maxCap",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "isBidding",
                "type": "t_bool"
              },
              {
                "label": "quoteBep20",
                "type": "t_contract(IERC20Upgradeable)1743"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(IERC20Upgradeable)1743": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(OGNFTBuyLimitMetadata)23240_storage))": {
            "label": "mapping(address => mapping(uint256 => struct OGNFTOffering.OGNFTBuyLimitMetadata))"
          },
          "t_mapping(t_uint256,t_struct(OGNFTBuyLimitMetadata)23240_storage)": {
            "label": "mapping(uint256 => struct OGNFTOffering.OGNFTBuyLimitMetadata)"
          },
          "t_struct(OGNFTBuyLimitMetadata)23240_storage": {
            "label": "struct OGNFTOffering.OGNFTBuyLimitMetadata",
            "members": [
              {
                "label": "counter",
                "type": "t_uint256"
              },
              {
                "label": "cooldownStartBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)39_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)39_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4414_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4414_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4149_storage"
              }
            ]
          },
          "t_struct(Set)4149_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6b8996f02d3351a56ce429b3de10a94d0ade94398422c0cc07c03dda84308574": {
      "address": "0xa53B6Ae2D1A9e10D3A4D0A9fFf06741ae4f215D2",
      "txHash": "0xb1eff84ce6bf33d218cabf687cc5dae70db08c427829a47b33cd301a6941e72f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ERC721HolderUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721HolderUpgradeable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)39_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "LatteMarket",
            "label": "isNFTSupported",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/nft/LatteMarket.sol:50"
          },
          {
            "contract": "LatteMarket",
            "label": "feeAddr",
            "type": "t_address",
            "src": "contracts/nft/LatteMarket.sol:51"
          },
          {
            "contract": "LatteMarket",
            "label": "feePercentBps",
            "type": "t_uint256",
            "src": "contracts/nft/LatteMarket.sol:52"
          },
          {
            "contract": "LatteMarket",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)25041",
            "src": "contracts/nft/LatteMarket.sol:53"
          },
          {
            "contract": "LatteMarket",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/nft/LatteMarket.sol:54"
          },
          {
            "contract": "LatteMarket",
            "label": "tokenCategorySellers",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))",
            "src": "contracts/nft/LatteMarket.sol:55"
          },
          {
            "contract": "LatteMarket",
            "label": "tokenBid",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(BidEntry)19192_storage))",
            "src": "contracts/nft/LatteMarket.sol:56"
          },
          {
            "contract": "LatteMarket",
            "label": "latteNFTMetadata",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(LatteNFTMetadata)19216_storage))",
            "src": "contracts/nft/LatteMarket.sol:59"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IWNativeRelayer)25041": {
            "label": "contract IWNativeRelayer"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
            "label": "mapping(address => mapping(uint256 => address))"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(BidEntry)19192_storage))": {
            "label": "mapping(address => mapping(uint256 => struct LatteMarket.BidEntry))"
          },
          "t_mapping(t_uint256,t_struct(BidEntry)19192_storage)": {
            "label": "mapping(uint256 => struct LatteMarket.BidEntry)"
          },
          "t_struct(BidEntry)19192_storage": {
            "label": "struct LatteMarket.BidEntry",
            "members": [
              {
                "label": "bidder",
                "type": "t_address"
              },
              {
                "label": "price",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(LatteNFTMetadata)19216_storage))": {
            "label": "mapping(address => mapping(uint256 => struct LatteMarket.LatteNFTMetadata))"
          },
          "t_mapping(t_uint256,t_struct(LatteNFTMetadata)19216_storage)": {
            "label": "mapping(uint256 => struct LatteMarket.LatteNFTMetadata)"
          },
          "t_struct(LatteNFTMetadata)19216_storage": {
            "label": "struct LatteMarket.LatteNFTMetadata",
            "members": [
              {
                "label": "cap",
                "type": "t_uint256"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "isBidding",
                "type": "t_bool"
              },
              {
                "label": "price",
                "type": "t_uint256"
              },
              {
                "label": "quoteBep20",
                "type": "t_contract(IERC20Upgradeable)1743"
              }
            ]
          },
          "t_contract(IERC20Upgradeable)1743": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)39_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)39_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4414_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4414_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4149_storage"
              }
            ]
          },
          "t_struct(Set)4149_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "d6e9d1a7edb42bde8193b0c127a00d5da9aac42ee98ffbd94719a16043a37ff8": {
      "address": "0xFEe4287E9d11A0742a28E112E4fC818ca8155dcA",
      "txHash": "0x4e5cfe85607dab200b2209c9226f5fc86a3fe0e94b207ab104531662c157c0f0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "_paused",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
          },
          {
            "contract": "PausableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "_roles",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)39_storage)",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "contract": "AccessControlUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:225"
          },
          {
            "contract": "Booster",
            "label": "masterBarista",
            "type": "t_contract(IMasterBarista)16020",
            "src": "contracts/nft/Booster.sol:42"
          },
          {
            "contract": "Booster",
            "label": "boosterConfig",
            "type": "t_contract(IBoosterConfig)24604",
            "src": "contracts/nft/Booster.sol:43"
          },
          {
            "contract": "Booster",
            "label": "latte",
            "type": "t_contract(IERC20Upgradeable)1743",
            "src": "contracts/nft/Booster.sol:44"
          },
          {
            "contract": "Booster",
            "label": "wNativeRelayer",
            "type": "t_contract(IWNativeRelayer)25041",
            "src": "contracts/nft/Booster.sol:45"
          },
          {
            "contract": "Booster",
            "label": "wNative",
            "type": "t_address",
            "src": "contracts/nft/Booster.sol:46"
          },
          {
            "contract": "Booster",
            "label": "userInfo",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)17094_storage))",
            "src": "contracts/nft/Booster.sol:58"
          },
          {
            "contract": "Booster",
            "label": "totalAccumBoostedReward",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "contracts/nft/Booster.sol:60"
          },
          {
            "contract": "Booster",
            "label": "userStakingNFT",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(NFTStakingInfo)17099_storage))",
            "src": "contracts/nft/Booster.sol:61"
          },
          {
            "contract": "Booster",
            "label": "_IN_EXEC_LOCK",
            "type": "t_uint256",
            "src": "contracts/nft/Booster.sol:63"
          }
        ],
        "types": {
          "t_contract(IMasterBarista)16020": {
            "label": "contract IMasterBarista"
          },
          "t_contract(IBoosterConfig)24604": {
            "label": "contract IBoosterConfig"
          },
          "t_contract(IERC20Upgradeable)1743": {
            "label": "contract IERC20Upgradeable"
          },
          "t_contract(IWNativeRelayer)25041": {
            "label": "contract IWNativeRelayer"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)17094_storage))": {
            "label": "mapping(address => mapping(address => struct Booster.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)17094_storage)": {
            "label": "mapping(address => struct Booster.UserInfo)"
          },
          "t_struct(UserInfo)17094_storage": {
            "label": "struct Booster.UserInfo",
            "members": [
              {
                "label": "accumBoostedReward",
                "type": "t_uint256"
              },
              {
                "label": "lastUserActionTime",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(NFTStakingInfo)17099_storage))": {
            "label": "mapping(address => mapping(address => struct Booster.NFTStakingInfo))"
          },
          "t_mapping(t_address,t_struct(NFTStakingInfo)17099_storage)": {
            "label": "mapping(address => struct Booster.NFTStakingInfo)"
          },
          "t_struct(NFTStakingInfo)17099_storage": {
            "label": "struct Booster.NFTStakingInfo",
            "members": [
              {
                "label": "nftAddress",
                "type": "t_address"
              },
              {
                "label": "nftTokenId",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_bytes32,t_struct(RoleData)39_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)39_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_struct(AddressSet)4414_storage"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_struct(AddressSet)4414_storage": {
            "label": "struct EnumerableSetUpgradeable.AddressSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)4149_storage"
              }
            ]
          },
          "t_struct(Set)4149_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "43d19dad07e5b984c504e43200b8e2a93421404aca3e32664c2a6f483cf6920b": {
      "address": "0x16D6E6eF3728860475Dc4A9C0833DE195de9e376",
      "txHash": "0x46e3756ea3d83b31939cf59b93d203fb978a10b2ba9036f058ac9734bf77b220",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "MasterBarista",
            "label": "latte",
            "type": "t_contract(ILATTE)17208",
            "src": "contracts/farm/MasterBarista.sol:41"
          },
          {
            "contract": "MasterBarista",
            "label": "bean",
            "type": "t_contract(IBeanBag)17115",
            "src": "contracts/farm/MasterBarista.sol:43"
          },
          {
            "contract": "MasterBarista",
            "label": "devAddr",
            "type": "t_address",
            "src": "contracts/farm/MasterBarista.sol:45"
          },
          {
            "contract": "MasterBarista",
            "label": "devFeeBps",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:46"
          },
          {
            "contract": "MasterBarista",
            "label": "lattePerBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:48"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusMultiplier",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:50"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusEndBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:52"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusLockUpBps",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:54"
          },
          {
            "contract": "MasterBarista",
            "label": "pools",
            "type": "t_struct(List)17383_storage",
            "src": "contracts/farm/MasterBarista.sol:59"
          },
          {
            "contract": "MasterBarista",
            "label": "poolInfo",
            "type": "t_mapping(t_address,t_struct(PoolInfo)14288_storage)",
            "src": "contracts/farm/MasterBarista.sol:61"
          },
          {
            "contract": "MasterBarista",
            "label": "userInfo",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)14277_storage))",
            "src": "contracts/farm/MasterBarista.sol:63"
          },
          {
            "contract": "MasterBarista",
            "label": "totalAllocPoint",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:65"
          },
          {
            "contract": "MasterBarista",
            "label": "startBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:67"
          },
          {
            "contract": "MasterBarista",
            "label": "stakeTokenCallerAllowancePool",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/farm/MasterBarista.sol:70"
          },
          {
            "contract": "MasterBarista",
            "label": "stakeTokenCallerContracts",
            "type": "t_mapping(t_address,t_struct(List)17383_storage)",
            "src": "contracts/farm/MasterBarista.sol:73"
          }
        ],
        "types": {
          "t_contract(ILATTE)17208": {
            "label": "contract ILATTE"
          },
          "t_contract(IBeanBag)17115": {
            "label": "contract IBeanBag"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(List)17383_storage": {
            "label": "struct LinkList.List",
            "members": [
              {
                "label": "llSize",
                "type": "t_uint256"
              },
              {
                "label": "next",
                "type": "t_mapping(t_address,t_address)"
              }
            ]
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_struct(PoolInfo)14288_storage)": {
            "label": "mapping(address => struct MasterBarista.PoolInfo)"
          },
          "t_struct(PoolInfo)14288_storage": {
            "label": "struct MasterBarista.PoolInfo",
            "members": [
              {
                "label": "allocPoint",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256"
              },
              {
                "label": "accLattePerShare",
                "type": "t_uint256"
              },
              {
                "label": "accLattePerShareTilBonusEnd",
                "type": "t_uint256"
              },
              {
                "label": "allocBps",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)14277_storage))": {
            "label": "mapping(address => mapping(address => struct MasterBarista.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)14277_storage)": {
            "label": "mapping(address => struct MasterBarista.UserInfo)"
          },
          "t_struct(UserInfo)14277_storage": {
            "label": "struct MasterBarista.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              },
              {
                "label": "bonusDebt",
                "type": "t_uint256"
              },
              {
                "label": "fundedBy",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(List)17383_storage)": {
            "label": "mapping(address => struct LinkList.List)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "ca0003809cb6639c14511576f3613a146e99aac74d37aebf65dfc2439183352c": {
      "address": "0x08936e290473a6BE55441f3E48BCeb44B94cd333",
      "txHash": "0xfa175159813a36af5dd4ac68ab0fc835f9771f4cd07b46395a53743bad60456f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "DripBar",
            "label": "campaignRewardInfo",
            "type": "t_mapping(t_uint256,t_array(t_struct(RewardInfo)10701_storage)dyn_storage)",
            "src": "contracts/farm/DripBar.sol:42"
          },
          {
            "contract": "DripBar",
            "label": "campaignInfo",
            "type": "t_array(t_struct(CampaignInfo)10696_storage)dyn_storage",
            "src": "contracts/farm/DripBar.sol:45"
          },
          {
            "contract": "DripBar",
            "label": "userInfo",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)10681_storage))",
            "src": "contracts/farm/DripBar.sol:47"
          },
          {
            "contract": "DripBar",
            "label": "rewardInfoLimit",
            "type": "t_uint256",
            "src": "contracts/farm/DripBar.sol:51"
          },
          {
            "contract": "DripBar",
            "label": "rewardHolder",
            "type": "t_address",
            "src": "contracts/farm/DripBar.sol:53"
          }
        ],
        "types": {
          "t_mapping(t_uint256,t_array(t_struct(RewardInfo)10701_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct DripBar.RewardInfo[])"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(RewardInfo)10701_storage)dyn_storage": {
            "label": "struct DripBar.RewardInfo[]"
          },
          "t_struct(RewardInfo)10701_storage": {
            "label": "struct DripBar.RewardInfo",
            "members": [
              {
                "label": "endBlock",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_struct(CampaignInfo)10696_storage)dyn_storage": {
            "label": "struct DripBar.CampaignInfo[]"
          },
          "t_struct(CampaignInfo)10696_storage": {
            "label": "struct DripBar.CampaignInfo",
            "members": [
              {
                "label": "stakingToken",
                "type": "t_contract(IERC20)6402"
              },
              {
                "label": "rewardToken",
                "type": "t_contract(IERC20)6402"
              },
              {
                "label": "startBlock",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256"
              },
              {
                "label": "accRewardPerShare",
                "type": "t_uint256"
              },
              {
                "label": "totalStaked",
                "type": "t_uint256"
              },
              {
                "label": "totalRewards",
                "type": "t_uint256"
              }
            ]
          },
          "t_contract(IERC20)6402": {
            "label": "contract IERC20"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)10681_storage))": {
            "label": "mapping(uint256 => mapping(address => struct DripBar.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)10681_storage)": {
            "label": "mapping(address => struct DripBar.UserInfo)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(UserInfo)10681_storage": {
            "label": "struct DripBar.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "302ba00914bb388920cc99de8d17ee6aad137567052fbfb9ff4c6349ba3757dd": {
      "address": "0x948803Ae6938d68d15347857d074104f0583134C",
      "txHash": "0x330795149fb27004f7d826e84d1881675011c695078955908f0bf789a24709e1",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "MasterBarista",
            "label": "latte",
            "type": "t_contract(ILATTE)17224",
            "src": "contracts/farm/MasterBarista.sol:41"
          },
          {
            "contract": "MasterBarista",
            "label": "bean",
            "type": "t_contract(IBeanBag)17131",
            "src": "contracts/farm/MasterBarista.sol:43"
          },
          {
            "contract": "MasterBarista",
            "label": "devAddr",
            "type": "t_address",
            "src": "contracts/farm/MasterBarista.sol:45"
          },
          {
            "contract": "MasterBarista",
            "label": "devFeeBps",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:46"
          },
          {
            "contract": "MasterBarista",
            "label": "lattePerBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:48"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusMultiplier",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:50"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusEndBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:52"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusLockUpBps",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:54"
          },
          {
            "contract": "MasterBarista",
            "label": "pools",
            "type": "t_struct(List)17399_storage",
            "src": "contracts/farm/MasterBarista.sol:59"
          },
          {
            "contract": "MasterBarista",
            "label": "poolInfo",
            "type": "t_mapping(t_address,t_struct(PoolInfo)14304_storage)",
            "src": "contracts/farm/MasterBarista.sol:61"
          },
          {
            "contract": "MasterBarista",
            "label": "userInfo",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)14293_storage))",
            "src": "contracts/farm/MasterBarista.sol:63"
          },
          {
            "contract": "MasterBarista",
            "label": "totalAllocPoint",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:65"
          },
          {
            "contract": "MasterBarista",
            "label": "startBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:67"
          },
          {
            "contract": "MasterBarista",
            "label": "stakeTokenCallerAllowancePool",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/farm/MasterBarista.sol:70"
          },
          {
            "contract": "MasterBarista",
            "label": "stakeTokenCallerContracts",
            "type": "t_mapping(t_address,t_struct(List)17399_storage)",
            "src": "contracts/farm/MasterBarista.sol:73"
          }
        ],
        "types": {
          "t_contract(ILATTE)17224": {
            "label": "contract ILATTE"
          },
          "t_contract(IBeanBag)17131": {
            "label": "contract IBeanBag"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(List)17399_storage": {
            "label": "struct LinkList.List",
            "members": [
              {
                "label": "llSize",
                "type": "t_uint256"
              },
              {
                "label": "next",
                "type": "t_mapping(t_address,t_address)"
              }
            ]
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_struct(PoolInfo)14304_storage)": {
            "label": "mapping(address => struct MasterBarista.PoolInfo)"
          },
          "t_struct(PoolInfo)14304_storage": {
            "label": "struct MasterBarista.PoolInfo",
            "members": [
              {
                "label": "allocPoint",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256"
              },
              {
                "label": "accLattePerShare",
                "type": "t_uint256"
              },
              {
                "label": "accLattePerShareTilBonusEnd",
                "type": "t_uint256"
              },
              {
                "label": "allocBps",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)14293_storage))": {
            "label": "mapping(address => mapping(address => struct MasterBarista.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)14293_storage)": {
            "label": "mapping(address => struct MasterBarista.UserInfo)"
          },
          "t_struct(UserInfo)14293_storage": {
            "label": "struct MasterBarista.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              },
              {
                "label": "bonusDebt",
                "type": "t_uint256"
              },
              {
                "label": "fundedBy",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(List)17399_storage)": {
            "label": "mapping(address => struct LinkList.List)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f504c270757fbf890b97fff49ae708d5f1fd9eeee3ac88d74214bf1b7c553eb8": {
      "address": "0xB8a30CF4e7be15F0366e8F94D3141ff761190CF1",
      "txHash": "0x3a62b92f9056e22f860515f5547ab3baa587c3a1bba74ea11b588591a6e7ee59",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "MasterBarista",
            "label": "latte",
            "type": "t_contract(ILATTE)21651",
            "src": "contracts/farm/MasterBarista.sol:48"
          },
          {
            "contract": "MasterBarista",
            "label": "bean",
            "type": "t_contract(IBeanBag)21548",
            "src": "contracts/farm/MasterBarista.sol:50"
          },
          {
            "contract": "MasterBarista",
            "label": "devAddr",
            "type": "t_address",
            "src": "contracts/farm/MasterBarista.sol:52"
          },
          {
            "contract": "MasterBarista",
            "label": "devFeeBps",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:53"
          },
          {
            "contract": "MasterBarista",
            "label": "lattePerBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:55"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusMultiplier",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:57"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusEndBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:59"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusLockUpBps",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:61"
          },
          {
            "contract": "MasterBarista",
            "label": "pools",
            "type": "t_struct(List)22101_storage",
            "src": "contracts/farm/MasterBarista.sol:66"
          },
          {
            "contract": "MasterBarista",
            "label": "poolInfo",
            "type": "t_mapping(t_address,t_struct(PoolInfo)15317_storage)",
            "src": "contracts/farm/MasterBarista.sol:68"
          },
          {
            "contract": "MasterBarista",
            "label": "userInfo",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)15306_storage))",
            "src": "contracts/farm/MasterBarista.sol:70"
          },
          {
            "contract": "MasterBarista",
            "label": "totalAllocPoint",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:72"
          },
          {
            "contract": "MasterBarista",
            "label": "startBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:74"
          },
          {
            "contract": "MasterBarista",
            "label": "stakeTokenCallerAllowancePool",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/farm/MasterBarista.sol:77"
          },
          {
            "contract": "MasterBarista",
            "label": "stakeTokenCallerContracts",
            "type": "t_mapping(t_address,t_struct(List)22101_storage)",
            "src": "contracts/farm/MasterBarista.sol:80"
          },
          {
            "contract": "MasterBarista",
            "label": "latteV2",
            "type": "t_contract(ILATTEV2)21778",
            "src": "contracts/farm/MasterBarista.sol:83"
          },
          {
            "contract": "MasterBarista",
            "label": "beanV2",
            "type": "t_contract(IBeanBag)21548",
            "src": "contracts/farm/MasterBarista.sol:84"
          },
          {
            "contract": "MasterBarista",
            "label": "activeLatte",
            "type": "t_contract(ILATTE)21651",
            "src": "contracts/farm/MasterBarista.sol:86"
          },
          {
            "contract": "MasterBarista",
            "label": "activeBean",
            "type": "t_contract(IBeanBag)21548",
            "src": "contracts/farm/MasterBarista.sol:87"
          }
        ],
        "types": {
          "t_contract(ILATTE)21651": {
            "label": "contract ILATTE"
          },
          "t_contract(IBeanBag)21548": {
            "label": "contract IBeanBag"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(List)22101_storage": {
            "label": "struct LinkList.List",
            "members": [
              {
                "label": "llSize",
                "type": "t_uint256"
              },
              {
                "label": "next",
                "type": "t_mapping(t_address,t_address)"
              }
            ]
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_struct(PoolInfo)15317_storage)": {
            "label": "mapping(address => struct MasterBarista.PoolInfo)"
          },
          "t_struct(PoolInfo)15317_storage": {
            "label": "struct MasterBarista.PoolInfo",
            "members": [
              {
                "label": "allocPoint",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256"
              },
              {
                "label": "accLattePerShare",
                "type": "t_uint256"
              },
              {
                "label": "accLattePerShareTilBonusEnd",
                "type": "t_uint256"
              },
              {
                "label": "allocBps",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)15306_storage))": {
            "label": "mapping(address => mapping(address => struct MasterBarista.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)15306_storage)": {
            "label": "mapping(address => struct MasterBarista.UserInfo)"
          },
          "t_struct(UserInfo)15306_storage": {
            "label": "struct MasterBarista.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              },
              {
                "label": "bonusDebt",
                "type": "t_uint256"
              },
              {
                "label": "fundedBy",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(List)22101_storage)": {
            "label": "mapping(address => struct LinkList.List)"
          },
          "t_contract(ILATTEV2)21778": {
            "label": "contract ILATTEV2"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f4134a9e536fda7d965d667979d7725de0de97c05488198d607c66e4f5043cab": {
      "address": "0x5649Ac5012C1892D481D584c0A8c3fc75E414fbB",
      "txHash": "0xf4daa2b7f79879fe933d803e20343c018e67fb3f60d174f580de80f2a6faf2b6",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_decimals",
            "type": "t_uint8",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)44_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "BeanBagV2",
            "label": "latte",
            "type": "t_contract(ILATTE)21651",
            "src": "contracts/farm/BeanBagV2.sol:19"
          }
        ],
        "types": {
          "t_contract(ILATTE)21651": {
            "label": "contract ILATTE"
          },
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_uint8": {
            "label": "uint8"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "6728a226eda00eb6e86335d3d90e1ebf7ea88736b26c4d86f24c785270f23218": {
      "address": "0xebA589Fa6d6791Ae0272cbea5B7E6ABbc8577D84",
      "txHash": "0x66338ba2ce94a84a322ac325067bd11947b30eafd5c599e0775b64eca59898ed",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "MasterBarista",
            "label": "latte",
            "type": "t_contract(ILATTE)21712",
            "src": "contracts/farm/MasterBarista.sol:48"
          },
          {
            "contract": "MasterBarista",
            "label": "bean",
            "type": "t_contract(IBeanBag)21609",
            "src": "contracts/farm/MasterBarista.sol:50"
          },
          {
            "contract": "MasterBarista",
            "label": "devAddr",
            "type": "t_address",
            "src": "contracts/farm/MasterBarista.sol:52"
          },
          {
            "contract": "MasterBarista",
            "label": "devFeeBps",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:53"
          },
          {
            "contract": "MasterBarista",
            "label": "lattePerBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:55"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusMultiplier",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:57"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusEndBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:59"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusLockUpBps",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:61"
          },
          {
            "contract": "MasterBarista",
            "label": "pools",
            "type": "t_struct(List)22162_storage",
            "src": "contracts/farm/MasterBarista.sol:66"
          },
          {
            "contract": "MasterBarista",
            "label": "poolInfo",
            "type": "t_mapping(t_address,t_struct(PoolInfo)15386_storage)",
            "src": "contracts/farm/MasterBarista.sol:68"
          },
          {
            "contract": "MasterBarista",
            "label": "userInfo",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)15375_storage))",
            "src": "contracts/farm/MasterBarista.sol:70"
          },
          {
            "contract": "MasterBarista",
            "label": "totalAllocPoint",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:72"
          },
          {
            "contract": "MasterBarista",
            "label": "startBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:74"
          },
          {
            "contract": "MasterBarista",
            "label": "stakeTokenCallerAllowancePool",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/farm/MasterBarista.sol:77"
          },
          {
            "contract": "MasterBarista",
            "label": "stakeTokenCallerContracts",
            "type": "t_mapping(t_address,t_struct(List)22162_storage)",
            "src": "contracts/farm/MasterBarista.sol:80"
          },
          {
            "contract": "MasterBarista",
            "label": "latteV2",
            "type": "t_contract(ILATTEV2)21839",
            "src": "contracts/farm/MasterBarista.sol:83"
          },
          {
            "contract": "MasterBarista",
            "label": "beanV2",
            "type": "t_contract(IBeanBag)21609",
            "src": "contracts/farm/MasterBarista.sol:84"
          },
          {
            "contract": "MasterBarista",
            "label": "activeLatte",
            "type": "t_contract(ILATTE)21712",
            "src": "contracts/farm/MasterBarista.sol:86"
          },
          {
            "contract": "MasterBarista",
            "label": "activeBean",
            "type": "t_contract(IBeanBag)21609",
            "src": "contracts/farm/MasterBarista.sol:87"
          }
        ],
        "types": {
          "t_contract(ILATTE)21712": {
            "label": "contract ILATTE"
          },
          "t_contract(IBeanBag)21609": {
            "label": "contract IBeanBag"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(List)22162_storage": {
            "label": "struct LinkList.List",
            "members": [
              {
                "label": "llSize",
                "type": "t_uint256"
              },
              {
                "label": "next",
                "type": "t_mapping(t_address,t_address)"
              }
            ]
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_struct(PoolInfo)15386_storage)": {
            "label": "mapping(address => struct MasterBarista.PoolInfo)"
          },
          "t_struct(PoolInfo)15386_storage": {
            "label": "struct MasterBarista.PoolInfo",
            "members": [
              {
                "label": "allocPoint",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256"
              },
              {
                "label": "accLattePerShare",
                "type": "t_uint256"
              },
              {
                "label": "accLattePerShareTilBonusEnd",
                "type": "t_uint256"
              },
              {
                "label": "allocBps",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)15375_storage))": {
            "label": "mapping(address => mapping(address => struct MasterBarista.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)15375_storage)": {
            "label": "mapping(address => struct MasterBarista.UserInfo)"
          },
          "t_struct(UserInfo)15375_storage": {
            "label": "struct MasterBarista.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              },
              {
                "label": "bonusDebt",
                "type": "t_uint256"
              },
              {
                "label": "fundedBy",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(List)22162_storage)": {
            "label": "mapping(address => struct LinkList.List)"
          },
          "t_contract(ILATTEV2)21839": {
            "label": "contract ILATTEV2"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "1a5a74aefae369997be2560890573ac29afce8faf09f11ae86ca386228c683d5": {
      "address": "0xeb4380ec62442c76564AA89571cCC518396C18e3",
      "txHash": "0x30995185cd666f91652070124afa3b0390a5bed6edf585a41d4faef36b004b22",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "MasterBarista",
            "label": "latte",
            "type": "t_contract(ILATTE)21692",
            "src": "contracts/farm/MasterBarista.sol:48"
          },
          {
            "contract": "MasterBarista",
            "label": "bean",
            "type": "t_contract(IBeanBag)21589",
            "src": "contracts/farm/MasterBarista.sol:50"
          },
          {
            "contract": "MasterBarista",
            "label": "devAddr",
            "type": "t_address",
            "src": "contracts/farm/MasterBarista.sol:52"
          },
          {
            "contract": "MasterBarista",
            "label": "devFeeBps",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:53"
          },
          {
            "contract": "MasterBarista",
            "label": "lattePerBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:55"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusMultiplier",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:57"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusEndBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:59"
          },
          {
            "contract": "MasterBarista",
            "label": "bonusLockUpBps",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:61"
          },
          {
            "contract": "MasterBarista",
            "label": "pools",
            "type": "t_struct(List)22142_storage",
            "src": "contracts/farm/MasterBarista.sol:66"
          },
          {
            "contract": "MasterBarista",
            "label": "poolInfo",
            "type": "t_mapping(t_address,t_struct(PoolInfo)15386_storage)",
            "src": "contracts/farm/MasterBarista.sol:68"
          },
          {
            "contract": "MasterBarista",
            "label": "userInfo",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)15375_storage))",
            "src": "contracts/farm/MasterBarista.sol:70"
          },
          {
            "contract": "MasterBarista",
            "label": "totalAllocPoint",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:72"
          },
          {
            "contract": "MasterBarista",
            "label": "startBlock",
            "type": "t_uint256",
            "src": "contracts/farm/MasterBarista.sol:74"
          },
          {
            "contract": "MasterBarista",
            "label": "stakeTokenCallerAllowancePool",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/farm/MasterBarista.sol:77"
          },
          {
            "contract": "MasterBarista",
            "label": "stakeTokenCallerContracts",
            "type": "t_mapping(t_address,t_struct(List)22142_storage)",
            "src": "contracts/farm/MasterBarista.sol:80"
          },
          {
            "contract": "MasterBarista",
            "label": "latteV2",
            "type": "t_contract(ILATTEV2)21819",
            "src": "contracts/farm/MasterBarista.sol:83"
          },
          {
            "contract": "MasterBarista",
            "label": "beanV2",
            "type": "t_contract(IBeanBag)21589",
            "src": "contracts/farm/MasterBarista.sol:84"
          },
          {
            "contract": "MasterBarista",
            "label": "activeLatte",
            "type": "t_contract(ILATTE)21692",
            "src": "contracts/farm/MasterBarista.sol:86"
          },
          {
            "contract": "MasterBarista",
            "label": "activeBean",
            "type": "t_contract(IBeanBag)21589",
            "src": "contracts/farm/MasterBarista.sol:87"
          }
        ],
        "types": {
          "t_contract(ILATTE)21692": {
            "label": "contract ILATTE"
          },
          "t_contract(IBeanBag)21589": {
            "label": "contract IBeanBag"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(List)22142_storage": {
            "label": "struct LinkList.List",
            "members": [
              {
                "label": "llSize",
                "type": "t_uint256"
              },
              {
                "label": "next",
                "type": "t_mapping(t_address,t_address)"
              }
            ]
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_struct(PoolInfo)15386_storage)": {
            "label": "mapping(address => struct MasterBarista.PoolInfo)"
          },
          "t_struct(PoolInfo)15386_storage": {
            "label": "struct MasterBarista.PoolInfo",
            "members": [
              {
                "label": "allocPoint",
                "type": "t_uint256"
              },
              {
                "label": "lastRewardBlock",
                "type": "t_uint256"
              },
              {
                "label": "accLattePerShare",
                "type": "t_uint256"
              },
              {
                "label": "accLattePerShareTilBonusEnd",
                "type": "t_uint256"
              },
              {
                "label": "allocBps",
                "type": "t_uint256"
              }
            ]
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)15375_storage))": {
            "label": "mapping(address => mapping(address => struct MasterBarista.UserInfo))"
          },
          "t_mapping(t_address,t_struct(UserInfo)15375_storage)": {
            "label": "mapping(address => struct MasterBarista.UserInfo)"
          },
          "t_struct(UserInfo)15375_storage": {
            "label": "struct MasterBarista.UserInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "rewardDebt",
                "type": "t_uint256"
              },
              {
                "label": "bonusDebt",
                "type": "t_uint256"
              },
              {
                "label": "fundedBy",
                "type": "t_address"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(List)22142_storage)": {
            "label": "mapping(address => struct LinkList.List)"
          },
          "t_contract(ILATTEV2)21819": {
            "label": "contract ILATTEV2"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    }
  }
}
